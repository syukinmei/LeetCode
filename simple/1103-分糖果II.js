// 排排坐，分糖果。
// 我们买了一些糖果 candies，打算把它们分给排好队的 n = num_people 个小朋友。
// 给第一个小朋友 1 颗糖果，第二个小朋友 2 颗，依此类推，直到给最后一个小朋友 n 颗糖果。
// 然后，我们再回到队伍的起点，给第一个小朋友 n + 1 颗糖果，第二个小朋友 n + 2 颗，依此类推，直到给最后一个小朋友 2 * n 颗糖果。
// 重复上述过程（每次都比上一次多给出一颗糖果，当到达队伍终点后再次从队伍起点开始），直到我们分完所有的糖果。注意，就算我们手中的剩下糖果数不够（不比前一次发出的糖果多），这些糖果也会全部发给当前的小朋友。
// 返回一个长度为 num_people、元素之和为 candies 的数组，以表示糖果的最终分发情况（即 ans[i] 表示第 i 个小朋友分到的糖果数）。

// 输入：candies = 7, num_people = 4
// 输出：[1,2,3,1]
// 解释：
// 第一次，ans[0] += 1，数组变为 [1,0,0,0]。
// 第二次，ans[1] += 2，数组变为 [1,2,0,0]。
// 第三次，ans[2] += 3，数组变为 [1,2,3,0]。
// 第四次，ans[3] += 1（因为此时只剩下 1 颗糖果），最终数组变为 [1,2,3,1]。

// 输入：candies = 10, num_people = 3
// 输出：[5,2,3]
// 解释：
// 第一次，ans[0] += 1，数组变为 [1,0,0]。
// 第二次，ans[1] += 2，数组变为 [1,2,0]。
// 第三次，ans[2] += 3，数组变为 [1,2,3]。
// 第四次，ans[0] += 4，最终数组变为 [5,2,3]。

// 方法一：模拟
// 模拟每一个人分到糖果的过程，按照题目描述的规则模拟即可。
/**
 * @param {number} candies
 * @param {number} num_people
 * @return {number[]}
 */
var distributeCandies = function (candies, num_people) {
    // 初始化结果数组，长度为 num_people，所有值初始为 0
    const ans = new Array(num_people).fill(0);

    // 模拟分糖过程
    for (let i = 0; candies > 0; i++) {
        // 当前应分配糖果的人的下标，使用模运算保证索引在 [0, num_people-1] 之间循环
        const index = i % num_people;

        // 分配糖果
        ans[index] += Math.min(candies, i + 1);

        // 减去本轮分配出去的糖果数
        candies -= Math.min(candies, i + 1);
    }
    // 返回结果数组
    return ans;
};
// 时间复杂度：O(max(√G, N))，G 为糖果数量，N 为小朋友数量。
//   本方法的时间复杂度取决于循环到底走多少步。假设走了 s 步，用等差数列求和公式可得 s 步时发放的糖果数量为 s(s+1) / 2。那么只需要保证 s^2 + s >= 2G 糖果就可以被发完。
//   只要当 s >= |√2G| 时，就有 s^2 >= 2G，显然也有 s^2 + s >= 2G。
//   因此可知总的步数为 s <= |√2G|，时间复杂度为 O(√G)。
//   另外建立糖果分配数组并初值赋值需要 O(N) 的时间，因此总的时间复杂度为 O(max(√G, N))。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
