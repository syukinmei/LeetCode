// 给你一个字符串 s 表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符：

//  - 'A'：Absent，缺勤
//  - 'L'：Late，迟到
//  - 'P'：Present，到场

// 如果学生能够 同时 满足下面两个条件，则可以获得出勤奖励：

//  - 按 总出勤 计，学生缺勤（'A'）严格 少于两天。
//  - 学生 不会 存在 连续 3 天或 连续 3 天以上的迟到（'L'）记录。

// 如果学生可以获得出勤奖励，返回 true ；否则，返回 false 。

// 输入：s = "PPALLP"
// 输出：true
// 解释：学生缺勤次数少于 2 次，且不存在 3 天或以上的连续迟到记录。

// 输入：s = "PPALLL"
// 输出：false
// 解释：学生最后三天连续迟到，所以不满足出勤奖励的条件。

// 方法一：模拟
// 根据题意，如果满足以下两个条件：
//  1. s 中 A 的个数小于 2。
//  2. s 中连续的 L 不超过 2 个，即不包含 LLL。
// 因此可以遍历一次字符串 s，遍历过程中统计 A 的个数，以及连续的 L 的个数，如果满足上述两个条件，则返回 true，否则返回 false。
/**
 * @param {string} s
 * @return {boolean}
 */
var checkRecord = function (s) {
    let absent = 0; // 统计缺席天数，A 个数
    let clate = 0; // 统计连续迟到天数，连续 L 个数
    for (let ch of s) {
        if (ch === "A") {
            absent++;
            // 缺席 2 次及以上，不满足条件
            if (absent >= 2) return false;
        } 
        if (ch === "L") {
            clate++;
            // 连续迟到 3 次及以上，不满足条件
            if (clate > 2) return false;
        } else {
            // 没有连续迟到，清空连续迟到次数。
            clate = 0;
        }
    }
    // 满足条件
    return true;
};
// 时间复杂度：O(n)，n 为字符串 s 的长度。需要遍历一次字符串 s 进行一次变量。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
