// Alice 有 n 枚糖，其中第 i 枚糖的类型为 candyType[i] 。Alice 注意到她的体重正在增长，所以前去拜访了一位医生。
// 医生建议 Alice 要少摄入糖分，只吃掉她所有糖的 n / 2 即可（n 是一个偶数）。Alice 非常喜欢这些糖，她想要在遵循医生建议的情况下，尽可能吃到最多不同种类的糖。
// 给你一个长度为 n 的整数数组 candyType ，返回： Alice 在仅吃掉 n / 2 枚糖的情况下，可以吃到糖的 最多 种类数。

// 输入：candyType = [1,1,2,2,3,3]
// 输出：3
// 解释：Alice 只能吃 6 / 2 = 3 枚糖，由于只有 3 种糖，她可以每种吃一枚。

// 输入：candyType = [1,1,2,3]
// 输出：2
// 解释：Alice 只能吃 4 / 2 = 2 枚糖，不管她选择吃的种类是 [1,2]、[1,3] 还是 [2,3]，她只能吃到两种不同类的糖。

// 输入：candyType = [6,6,6,6]
// 输出：1
// 解释：Alice 只能吃 4 / 2 = 2 枚糖，尽管她能吃 2 枚，但只能吃到 1 种糖。

// 方法一：哈希集合去重
// 由于只吃掉 n / 2 枚糖，所以最多只能吃到 n / 2 种糖。
// 假设这些糖果一共有 m 种，最多就只能吃 m 种糖。
// 因此，我们可以先对糖果的种类进行去重，然后统计去重后的糖果种类数。
//  - 如果 m <= n/2，那么每种糖都可以吃到一颗，此时答案为 m。
//  - 如果 m > n/2，那么由于医生的建议，只能吃到 n/2 种糖，此时答案为 n/2。
// 综上所述，答案为 min(m, n/2)。
/**
 * @param {number[]} candyType
 * @return {number}
 */
var distributeCandies = function(candyType) {
    const set = new Set(candyType);
    const n = candyType.length;
    const m = set.size;
    return Math.min(m, n / 2);
};
// 时间复杂度：O(n)，其中 n 是糖果的种类数。构建哈希集合 set 需要 O(n) 的时间，其余都只需要常数时间，因此总的时间复杂度为 O(n)。
// 空间复杂度：O(n)，其中 n 是糖果的种类数。哈希集合 set 需要 O(n) 的空间。
