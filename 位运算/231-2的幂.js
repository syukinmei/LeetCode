// 给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。
// 如果存在一个整数 x 使得 n == 2x ，则认为 n 是 2 的幂次方。

// 输入：n = 1
// 输出：true
// 解释：2^0 = 1

// 输入：n = 16
// 输出：true
// 解释：2^4 = 16

// 输入：n = 3
// 输出：false

// 输入：n = 4
// 输出：true

// 输入：n = 5
// 输出：false

/**
 * @param {number} n
 * @return {boolean}
 */
// 方法一：位运算 n & (n-1)
// n & (n-1) 可以消除 n 的二进制表示中最低的那个 1。
// 一个数 n 是 2 的幂，当且仅当 n 是正整数，并且 n 的二进制表示中只有一个 1。
// 具体的：消除 n 的二进制表示中最低的那个 1，然后判断剩余的数值是否为 0，是则说明 n 是 2 的幂。
var isPowerOfTwo = function (n) {
  if (n <= 0) return false;
  return (n & (n - 1)) === 0;
};
// 时间复杂度：O(1)。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。

// 方法二：位运算 n & (-n)
// n & (-n) 可以获取 n 的二进制表示中最低的那个 1。
// 具体的：获取 n 的二进制表示中最低的那个 1，然后判断其值是否为 n，是则说明 n 是 2 的幂。
var isPowerOfTwo = function (n) {
  if (n <= 0) return false;
  return (n & -n) === n;
};
// 时间复杂度：O(1)。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
