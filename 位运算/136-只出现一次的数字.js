// 给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
// 你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。

// 输入：nums = [2,2,1]
// 输出：1

// 输入：nums = [4,1,2,1,2]
// 输出：4

// 输入：nums = [1]
// 输出：1

/**
 * @param {number[]} nums
 * @return {number}
 */
// 位运算 异或
// 利用相同的元素异或的值为0，以及 交换律和结合律。
// 即，a ^ 0 = a； a ^ a = 0； a ^ b ^ a = b ^ a ^ a = b ^ (a ^ a) = b ^ 0 = b；
// 具体的，我们把所有数字进行异或运算，成对的数字就会变成0，因为数组 nums 中只有一个落单的数字，因此最后会变成，0^0^...^0^once = once。
// 所以，最后异或的结果就是只出现一次的元素。
var singleNumber = function (nums) {
  let once = 0;
  for (const num of nums) {
    once ^= num;
  }
  return once;
};
// 时间复杂度：O(n)，n 为数组 nums 的长度，需要对数组进行一次遍历。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
