// 给你数字 k ，请你返回和为 k 的斐波那契数字的最少数目，其中，每个斐波那契数字都可以被使用多次。
// 斐波那契数字定义为：
//  - F1 = 1
//  - F2 = 1
//  - Fn = Fn-1 + Fn-2 ， 其中 n > 2 。
// 数据保证对于给定的 k ，一定能找到可行解。


// 输入：k = 7
// 输出：2 
// 解释：斐波那契数字为：1，1，2，3，5，8，13，……
// 对于 k = 7 ，我们可以得到 2 + 5 = 7 。

// 输入：k = 10
// 输出：2 
// 解释：对于 k = 10 ，我们可以得到 2 + 8 = 10 。

// 输入：k = 19
// 输出：3 
// 解释：对于 k = 19 ，我们可以得到 1 + 5 + 13 = 19 。


/**
 * @param {number} k
 * @return {number}
 */
// 方法一：贪心
// 首先找到所有不超过 k 的斐波那契数字，然后每次贪心的选择不超过 k 的最大斐波那契数字，将 k 减去所选的斐波那契数字，重复该操作，直到 k 变为 0 ，此时所选的斐波那契数字满足和为 k 且数目最少。
var findMinFibonacciNumbers = function (k) {
    // 求所有不超过 k 的斐波那契数字
    const F = [1, 1];
    let a = 1, b = 1;
    while (a + b <= k) {
        const c = a + b;
        F.push(c);
        a = b;
        b = c;
    }

    // 贪心选取
    let ans = 0;
    for (let i = F.length - 1; i >= 0 && k > 0; i--) {
        if (F[i] <= k) {
            k -= F[i];
            ans++;
        }
    }
    return ans;
};
// 时间复杂度：O(logk)，k 为给定的整数。需要找到所有不超过 k 的斐波那契数字，然后计算和为 k 的最少斐波那契数字数目，不超过 k 的斐波那契数字的个数是O(logk)个
// 空间复杂度：O(logk)，k 为给定的整数。需要 O(logk)的空间存储所有不超过 k 的斐波那契数字。