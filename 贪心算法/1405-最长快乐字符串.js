// 如果字符串中不含有任何 'aaa'，'bbb' 或 'ccc' 这样的字符串作为子串，那么该字符串就是一个「快乐字符串」。

// 给你三个整数 a，b ，c，请你返回 任意一个 满足下列全部条件的字符串 s：

// - s 是一个尽可能长的快乐字符串。
// - s 中 最多 有a 个字母 'a'、b 个字母 'b'、c 个字母 'c' 。
// - s 中只含有 'a'、'b' 、'c' 三种字母。
// 如果不存在这样的字符串 s ，请返回一个空字符串 ""。


// 输入：a = 1, b = 1, c = 7
// 输出："ccaccbcc"
// 解释："ccbccacc" 也是一种正确答案。

// 输入：a = 2, b = 2, c = 1
// 输出："aabbc"

// 输入：a = 7, b = 1, c = 0
// 输出："aabaa"
// 解释：这是该测试用例的唯一正确答案。


// 方法一：贪心
// 贪心策略：
// 优先使用当前数量最多的字母。
// 依次从当前数量最多的字母开始尝试，如果发现加入当前字母会导致出现三个连续相同字母，则跳过当前字母，直到我们找到可以添加的字母为止。实际上每次只会在数量最多和次最多的字母中选择一个。
// 如果尝试所有的字母都无法添加，则直接退出循环，此时构成的字符串即为最长的快乐字符串。
/**
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @return {string}
 */
var longestDiverseString = function (a, b, c) {
    let res = []; // 存放构建的快乐字符串
    const arr = [[a, 'a'], [b, 'b'], [c, 'c']]; // 用于记录 字母 及其 数量
    while (true) {
        let hasNext = false; // 用于记录快乐字符串状态(有无字符增加)
        arr.sort((a, b) => b[0] - a[0]); // 对可用字符数量进行排序，根据字母数量 降序 排序
        for (const [i, [c, ch]] of arr.entries()) {
            // 当前字母数量为0，需退出循环
            if (c === 0) break;

            // 如果构建的快乐字符串长度大于等于2 且 最后两个字母与当前字母相同 则使用次数量最多的字母，即跳过本次循环 使用次数量字母
            const m = res.length;
            if (m >= 2 && res[m - 1] === ch && res[m - 2] === ch) continue;

            // 当前字母添加成功，更新 快乐字符串 及其 状态，可选字母数量，并且 退出循环，重新排序
            hasNext = true; // 状态改为true 表示快乐字符串有变化
            res.push(ch);
            arr[i][0]--; // 当前ch已经被添加到结果集中 对应数量减1
            break; // 需要退出循环，重新排序 为什么呢？
            // 举例来说，a=1,b=7,c=7，因为先会排序，所以排序后结果是[[7,"b"],[7,"c"],[1,"a"]]
            // 第1步：当先添加c之后，需要退出再走排序，因为现在数量变了，所以排序后的结果就会相应的变化为[[7,"c"],[6,"b"],[1,"a"]]
        }
        // 当没有可以添加到结果集中的字符的时候就可以退出了
        // 本质上可以理解为，当我们循环arr，arr中的字符要么数量小于0要么添加了此字符大于2构不成快乐字符串了，也就是说只剩下废柴了，这时候就应该退出while true的循环了
        if (!hasNext) break; // 快乐字符串无变化（没有添加字符），最长快乐字符串构建完成，跳出while循环
    }
    // 返回快乐字符串
    return res.join('');
};
// 时间复杂度：O( (a+b+c) * ClogC )。a、b、c为给定的整数，C表示字母的种类，本题中C = 3。每次从待选的字母中选择一个字母需要执行一次排序，时间复杂度为O(ClogC)，最多需要选择 a+b+c 个字母。
// 空间复杂度：O(C)，在本题中C = 3。需要O(C)的空间存储 字母 及其 当前数量。