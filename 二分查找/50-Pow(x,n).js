// 实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。

// 输入：x = 2.00000, n = 10
// 输出：1024.00000

// 入：x = 2.10000, n = 3
// 输出：9.26100

// 输入：x = 2.00000, n = -2
// 输出：0.25000
// 解释：2-2 = 1/22 = 1/4 = 0.25

// 前置知识：
// 当指数 n 为负数时，我们可以计算 x^-n 再取倒数得到结果。

/**
 * @param {number} x
 * @param {number} n
 * @return {number}
 */

// 方法一：暴力解法
/* var myPow = function (x, n) {
    //  处理n为负数的情况
    if (n < 0) {
        x = 1 / x;
        n = -n;
    }
    let ans = 1;
    for (let i = 1; i <= n; i++) {
        ans *= x;
    }
    return ans;
}; */
// 时间复杂度为O(n)
// 空间复杂度为O(1)

// 方法二：快速幂算法
// 「快速幂算法」的本质是分治算法。
// 例如，我们要计算 x^64，我们可以按照：
//  x -> x^2 -> x^4 -> x^8 -> x^16 -> x^32 -> x^64
// 这样的顺序，从 x 开始，每次直接在上一次的结果进行平方，计算 6 次就可以得到 x^64 的结果。而不需要对乘 64 次 x。

// 再举一个例子，我们要计算 x^77，我们可以按照：
//  x -> x^2 -> x^4 -> x^9 -> x^19 -> x^38 -> x^77
// 这样的顺序，在 x -> x^2，x^2 -> x^4，x^19 -> x^38 这些步骤中，我们直接利用上一次的结果进行平方，而在 x^4 -> x^9，x^9 -> x^19，x^38 -> x^77 这些步骤中，我们将上一次的结果平方后，再额外乘以一个 x 即可。

// 从左到右进行推导看上去很困难，因为每一步中，我们不知道在将上一步的结果平方后，还需不需要额外乘以一个 x。但是如果我们从右往左看，分治的思想就非常明显了：
//  - 当我们要计算 x^n 时，我们可以先计算 y = x^⌊n/2⌋；
//  - 如果 n 为偶数，那么 x^n = y^2；
//  - 如果 n 为奇数，那么 x^n = y^2 * x。

// 具体的：
// 把 x 的 n 次方，转变为 [x^(n/2)]^2  ->  (x*x)^(n/2)
// 考虑n为奇数和偶数的情况：[x^(n/2)]^2*x 亦或者 先将n-1操作 x*x^(n-1)
// x^n -> x^(n/2) -> x^(n/4) -> ... -> x^1===x or x^0 ===0
var myPow = function (x, n) {
    // 递归写法
    // if (n < 0) return 1 / myPow(x, -n);
    // if (n === 0) return 1; // 设置递归的出口
    // if (n % 2) return x * myPow(x, n - 1);
    // return myPow(x * x, n / 2);

    // 非递归写法
    if (n < 0) {
        x = 1 / x;
        n = -n;
    }
    if (n === 0) return 1;
    let res = 1;
    while (n > 1) {
        if (n & 1) {
            // 按位与 等价n % 2 === 1
            n--;
            res *= x; // 将x^n 转变为 x*x^(n-1)
        }
        x *= x;
        n = n / 2;
    }
    return res * x;
};

// 时间复杂度：O(logN)。N为n，需要计算x的n，n/2，n/4，。。。，1次，即每次循环都会使得指数减少一半，因此时间复杂度为 O(logN)。
// 空间复杂度：O(1)，如果是递归写法就是 O(logN)，即为递归的层数。这是由于递归的函数调用会使用栈空间。
