// 给你一个数组 nums 。nums 的源数组中，所有元素与 nums 相同，但按非递减顺序排列。
// 如果 nums 能够由源数组轮转若干位置（包括 0 个位置）得到，则返回 true ；否则，返回 false 。
// 源数组中可能存在 重复项 。
// 注意：我们称数组 A 在轮转 x 个位置后得到长度相同的数组 B ，当它们满足 A[i] == B[(i+x) % A.length] ，其中 % 为取余运算。

// 输入：nums = [3,4,5,1,2]
// 输出：true
// 解释：[1,2,3,4,5] 为有序的源数组。
// 可以轮转 x = 3 个位置，使新数组从值为 3 的元素开始：[3,4,5,1,2] 。

// 输入：nums = [2,1,3,4]
// 输出：false
// 解释：源数组无法经轮转得到 nums 。


// 输入：nums = [2,1,3,4]
// 输出：false
// 解释：源数组无法经轮转得到 nums 。


// 输入：nums = [1,2,3]
// 输出：true
// 解释：[1,2,3] 为有序的源数组。
// 可以轮转 x = 0 个位置（即不轮转）得到 nums 。

// Tips:
// 轮转的意思是把第一个数移动到最后或者最后的数移动到前面。


/**
 * @param {number[]} nums
 * @return {boolean}
 */
// 方法一：遍历
// 根据题意可知，返回 true 的情况有两种：
//  - nums 数组中的元素就是按非递减顺序排列，则说明由源数组轮转 0 个位置可以得到 nums 数组。
//  - nums 数组中，仅仅有 1 次 「递减」的情况发生，那么还需要满足 nums[0] >= nums[nums.length - 1]，才返回 true。
var check = function (nums) {
    let t = 0; // nums数组中递减情况的次数。
    for (let i = 1; i < nums.length; i++) {
        if (nums[i - 1] > nums[i]) t++; // 出现 「递减」的情况，t++
        if (t > 1) return false; // 如果出现超过1次「递减」的情况，则之间返回false
    }
    return t === 0 || nums[0] >= nums[nums.length - 1];
};
// 时间复杂度：O(n)，n 为数组 nums 的长度。我们只需要遍历一次数组即可。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。


// 方法二：遍历
// 把数组 nums 看成环，最后一个元素的下一个元素是第一个元素。记录出现「递减」情况的次数。最多出现一次，否则返回false。
var check = function (nums) {
    const n = nums.length;
    let t = 0; // nums数组中递减情况的次数。
    for (let i = 0; i < n; i++) {
        if (nums[i] > nums[(i + 1) % n]) t++;
    }
    return t <= 1;
};
// 时间复杂度：O(n)，n 为数组 nums 的长度。我们只需要遍历一次数组即可。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
