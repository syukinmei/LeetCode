// 如果字符串满足以下条件之一，则可以称之为 有效括号字符串（valid parentheses string，可以简写为 VPS）：
// 字符串是一个空字符串 ""，或者是一个不为 "(" 或 ")" 的单字符。
// 字符串可以写为 AB（A 与 B 字符串连接），其中 A 和 B 都是 有效括号字符串 。
// 字符串可以写为 (A)，其中 A 是一个 有效括号字符串 。

// 类似地，可以定义任何有效括号字符串 S 的 嵌套深度 depth(S)：
// depth("") = 0
// depth(C) = 0，其中 C 是单个字符的字符串，且该字符不是 "(" 或者 ")"
// depth(A + B) = max(depth(A), depth(B))，其中 A 和 B 都是 有效括号字符串
// depth("(" + A + ")") = 1 + depth(A)，其中 A 是一个 有效括号字符串
// 例如：""、"()()"、"()(()())" 都是 有效括号字符串（嵌套深度分别为 0、1、2），而 ")(" 、"(()" 都不是 有效括号字符串 。
// 给你一个 有效括号字符串 s，返回该字符串的 s 嵌套深度 。

// 输入：s = "(1+(2*3)+((8)/4))+1"
// 输出：3
// 解释：数字 8 在嵌套的 3 层括号中。

// 输入：s = "(1)+((2))+(((3)))"
// 输出：3

// 输入：s = "1+(2*3)/(2-1)"
// 输出：1

// 输入：s = "1"
// 输出：0


/**
 * @param {string} s
 * @return {number}
 */
// 方法一：用一个计数器模拟栈（遍历）
// 这道题保证了括号一定是匹配的，且我们也不需要关心栈中具体的内容；只是需要了解括号嵌套的最大深度（栈的大小）；所以我们用一个变量就可以搞定。
var maxDepth = function (s) {
    let size = 0, max = 0;
    for (let i = 0; i < s.length; i++) {
        if (s[i] === '(') {
            size++;
            max = Math.max(max, size);
        } else if (s[i] === ')') {
            size--;
        }
    }
    return max;
};
// 时间复杂度：O(n)，n 为字符串 s 的长度，需要遍历一次字符串。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。