// 给你一个正整数 num ，请你统计并返回 小于或等于 num 且各位数字之和为 偶数 的正整数的数目。
// 正整数的 各位数字之和 是其所有位上的对应数字相加的结果。

// 输入：num = 4
// 输出：2
// 解释：
// 只有 2 和 4 满足小于等于 4 且各位数字之和为偶数。


// 输入：num = 30
// 输出：14
// 解释：
// 只有 14 个整数满足小于等于 30 且各位数字之和为偶数，分别是： 
// 2、4、6、8、11、13、15、17、19、20、22、24、26 和 28 。


/**
 * @param {number} num
 * @return {number}
 */
// 方法一：枚举
// 枚举 1～mum 内的所有正整数，如果正整数的各位数字之和为偶数，那么将结果加1，最后返回结果。
var countEven = function (num) {
    let count = 0; // 记录个数
    for (let i = 1; i <= num; i++) {
        let x = i;
        let sum = 0; // 计算当前数各位数字之和。
        while (x !== 0) {
            sum += x % 10;
            x = Math.floor(x / 10);
        }
        // 如果和为偶数则加1
        if (sum % 2 === 0) count++;
    }
    return count;
};
// 时间复杂度：O(num*lognum)，我们需要枚举 num 个正整数其时间复杂度为O(num)，并判断每个正整数的各位数字之和是否为偶数需要O(logn)，所以总共需要O(num*lognum)的时间复杂度。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
