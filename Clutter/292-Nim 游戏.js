// 你和你的朋友，两个人一起玩 Nim 游戏：

// 桌子上有一堆石头。
// 你们轮流进行自己的回合， 你作为先手 。
// 每一回合，轮到的人拿掉 1 - 3 块石头。
// 拿掉最后一块石头的人就是获胜者。
// 假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。如果可以赢，返回 true；否则，返回 false 。

// 输入：n = 4
// 输出：false
// 解释：以下是可能的结果:
// 1. 移除1颗石头。你的朋友移走了3块石头，包括最后一块。你的朋友赢了。
// 2. 移除2个石子。你的朋友移走2块石头，包括最后一块。你的朋友赢了。
// 3.你移走3颗石子。你的朋友移走了最后一块石头。你的朋友赢了。
// 在所有结果中，你的朋友是赢家。

// 输入：n = 1
// 输出：true

// 输入：n = 2
// 输出：true

// 提示：
// 1 <= n <= 2^31 - 1

// 方法一：博弈论
// 这是一道 Nim 游戏的简化版。
// 在不知晓博弈论结论前，可以先通过找规律得到猜想，然后再从「何种情况下，先手会处于必胜态」的角度来进行分析。
// 根据题意，我们尝试从小范围数据的情况进行讨论：
//  1. 如果落到先手的局面为「石子数量为 1-3 」的话，那么先手必胜；
//  2. 如果落到先手的局面为 「石子数量为 4 」的话，那么先手决策完（无论何种决策），交到后手的局面为 「石子数量为 1-3 」，此时后手必胜，对应先手必败；
//      - 如果交给先手的局面为 4 的话，则先手必败
//  3. 如果落到先手的局面为 「石子数量为 5-7 」的话，那么先手可以通过控制选择石子的数量，来使得后手处于「石子数量为 4」 的局面（此时后手必输），因此先手必胜；
//  4. 如果落到先手的局面为 「石子数量为 8」 的话，由于每次只能选 1-3 个石子，因此交由后手的局面为 5-7，根据情况 3 我们可以知道此时先手必输；
//  ......

// 到这里，我们可以大胆猜测，当起始局面石子数量为 4 的倍数时，先手必输，否则先手必胜。因为只要制造 4 的倍数给对手，即可保证最后的胜利。

/**
 * @param {number} n
 * @return {boolean}
 */
var canWinNim = function (n) {
    return n % 4 !== 0;
};
// 时间复杂度：O(1)。
// 空间复杂度：O(1)。
