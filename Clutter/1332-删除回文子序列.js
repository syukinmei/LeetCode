// 给你一个字符串 s，它仅由字母 'a' 和 'b' 组成。每一次删除操作都可以从 s 中删除一个回文 子序列。
// 返回删除给定字符串中所有字符（字符串为空）的最小删除次数。
// 「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。
/*
    给定字符串 "asdfghj"
    子串是: asd,asdf等很多个子串， 是连在一起的。
    子序列是: asf,adf等很多个子序列 ，子序列中的字符在字符串中不一定是连在一起的。
*/

// 「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。

// 输入：s = "ababa"
// 输出：1
// 解释：字符串本身就是回文序列，只需要删除一次。

// 输入：s = "abb"
// 输出：2
// 解释："abb" -> "bb" -> "". 
// 先删除回文子序列 "a"，然后再删除 "bb"。

// 输入：s = "baabb"
// 输出：2
// 解释："baabb" -> "b" -> "". 
// 先删除回文子序列 "baab"，然后再删除 "b"。

/**
 * @param {string} s
 * @return {number}
 */
// 根题意得，答案只有两种可能：
// 1、如果 s 是回文，1次。
// 2、s 不是回文，2次。比如 abbaba 可以先删除所有的 a ，再删除所有的 b ，删除次数为 2。
var removePalindromeSub = function (s) {
    const n = s.length;
    const mid = n >> 1;
    for (let i = 0; i < mid; i++) {
        if (s.charAt(i) !== s.charAt(n - 1 - i)) return 2; // 不是回文
    }
    return 1;
}
// 时间复杂度：O(n)，n为字符串 s 的长度。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。