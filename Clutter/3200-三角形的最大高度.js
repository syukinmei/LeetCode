// 给你两个整数 red 和 blue，分别表示红色球和蓝色球的数量。你需要使用这些球来组成一个三角形，满足第 1 行有 1 个球，第 2 行有 2 个球，第 3 行有 3 个球，依此类推。
// 每一行的球必须是 相同 颜色，且相邻行的颜色必须 不同。
// 返回可以实现的三角形的 最大 高度。

// 输入： red = 2, blue = 4
// 输出： 3
// 解释：
//       蓝
//    红    红
// 蓝    蓝    蓝
// 上图显示了唯一可能的排列方式。

// 输入： red = 2, blue = 1
// 输出： 2
// 解释：
//    蓝
// 红    红
// 上图显示了唯一可能的排列方式。

// 输入： red = 1, blue = 1
// 输出： 1

// 输入： red = 10, blue = 1
// 输出： 2
// 解释：
//    蓝
// 红    红
// 上图显示了唯一可能的排列方式。

// 方法一：模拟
// 使用两种可能性计算最大高度。即红球在顶部，蓝球在顶部。
// 递增地枚举三角形的高度，在第 i 行时，如果对应的颜色的剩余球数大于等于 i 个，那么就可以组成第 i 行，否则不能，三角形的最大高度为 i-1。
// 三角形的颜色布局有两种可能：即红蓝交替（第一行为红色）或者蓝红交替（第一行为蓝色），我们分别枚举这两种情况，并取二者高度的较大值即可。
/**
 * @param {number} red
 * @param {number} blue
 * @return {number}
 */
var maxHeightOfTriangle = function (red, blue) {
    // 用于计算在给定红色和蓝色小球数量的情况下，三角形的最大高度
    // x 代表当前奇数层的颜色小球数量，y 代表当前偶数层的颜色小球数量
    const maxHeight = (x, y) => {
        for (let i = 1; ; i++) {
            if (i % 2 === 1) {
                x -= i;
                if (x < 0) return i - 1;
            } else {
                y -= i;
                if (y < 0) return i - 1;
            }
        }
    };

    // 比较两种情况，取较大值
    return Math.max(maxHeight(red, blue), maxHeight(blue, red));
};
// 时间复杂度：O(√(n + m))，n 和 m 分别为给定的 red 和 blue 的数量，同一种颜色的球形成一个公差为 2 的等差数量，那么球的数量是三角形高度的平方级别，因此高度是数量的平方根级别，即 O(√(n + m))。
// 空间复杂：O(1)，只需要常数的空间存放若干变量。

// 方法二：数学公式
// 因为每一行的小球依次递增一个，满足等差数列条件。
// 由题可知，同色球的每一行比上一行多 2 个，因此每行同色球的数量是一个等差数量。我们可以用等差数列求和公式 Sn = (n/2)(2a + (n-1)d)‌ 来求出指定数量的小球可以构建多少行。
// 然后分别计算 2 种情况，奇数行放红球，偶数行放蓝球；或者奇数行放蓝球，偶数行放红球，最多能放多少行。两种情况取最大值。
// 奇数行：
//  - 设奇数行有 k 行，那么需要小球数量为：1+3+5+...+(2k-1) = k^2
//  - 假设我们有 n 个球，那么奇数行该色球的数量满足： n >= k^2
//  - 此时可得，n 个球数量固定，可构建的行数 k 的最大值为 ⌊√n⌋，最后一个奇数行在 2*k - 1。
// 偶数行：
//  - 设偶数行有 k 行，那么需要小球数量为：2+4+6+...+(2k) = k^2+k
//  - 假设我们有 n 个球，那么偶数行该色球的数量满足： n >= k^2+k
//  - 此时可得，n 个球数量固定，可构建的行数 k 的最大值为 ⌊(√(4n+1)-1)/2⌋，最后一个偶数行在 2 * ⌊(√(4n+1)-1)/2⌋。

// 总行数：
//  - 此时有 odd 个奇数行，even 个偶数行，那么总行数为：
//    a. 2 * even + 1 (odd > even)
//    b. 2 * odd (otherwise)

// 这时候我们可以将题目转化为：给定 odd 个球用于奇数层，even 个球用于偶数层，求最多可以构建多少层。
// 然后就是两种情况：
//  1. 用红色球构建奇数层（odd = red），用蓝色球构建偶数层（even = blue）；
//  2. 用蓝色球构建奇数层（odd = blue），用红色球构建偶数层（even = red）；
// 我们取二者高度的较大值即可。

// 具体实现：
//  1. 使用一个辅助函数 maxHeight，用于计算给定 odd 个球用于搭建奇数层，even 个球用于搭建偶数层，最多可以构建多少层：
//    a. 分别求出可搭建的最大奇数层和最大偶数层；
//    b. 最大层数就是二者较小值 + 1；
//  2. 分别计算两种情况，取较大值：
//    a. 用红色球构建奇数层，用蓝色球构建偶数层；
//    b. 用蓝色球构建奇数层，用红色球构建偶数层；
//  3. 取两种情况的较大值

// Q&A：
//  Q：最大层数为什么要 + 1？
//  A：没加一时是偶数层和奇数层较少的那个，较多的那个必然还能填充一层，因此最终答案需要加一。例如奇数层最大可到 3 层，偶数层最大可到 7 层，那么最终可搭建的层数是在第 3 层后面加上一个 第 4 层的偶数层。

var maxHeightOfTriangle = function (red, blue) {
    // 辅助函数
    const maxHeight = (odd, even) => {
        const oddLevel = Math.floor(Math.sqrt(odd)) * 2 - 1;
        const evenLevel = Math.floor((Math.sqrt(4 * even + 1) - 1) / 2) * 2;
        return Math.min(oddLevel, evenLevel) + 1;
    };

    return Math.max(maxHeight(red, blue), maxHeight(blue, red));
};
// 时间复杂度：O(1)，仅使用常数时间来计算两种情况的偶数层数和奇数层数。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
