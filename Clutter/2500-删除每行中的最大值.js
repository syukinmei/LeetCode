// 给你一个 m x n 大小的矩阵 grid ，由若干正整数组成。

// 执行下述操作，直到 grid 变为空矩阵：

// 从每一行删除值最大的元素。如果存在多个这样的值，删除其中任何一个。
// 将删除元素中的最大值与答案相加。
// 注意 每执行一次操作，矩阵中列的数据就会减 1 。

// 返回执行上述操作后的答案。

// [1, 2, 4]    =>  [1, 2]    =>  [1]
// [3, 3, 1]    =>  [3, 1]    =>  [1]

// 输入：grid = [[1,2,4],[3,3,1]]
// 输出：8
// 解释：上图展示在每一步中需要移除的值。
// - 在第一步操作中，从第一行删除 4 ，从第二行删除 3（注意，有两个单元格中的值为 3 ，我们可以删除任一）。在答案上加 4 。
// - 在第二步操作中，从第一行删除 2 ，从第二行删除 3 。在答案上加 3 。
// - 在第三步操作中，从第一行删除 1 ，从第二行删除 1 。在答案上加 1 。
// 最终，答案 = 4 + 3 + 1 = 8 。

// [10]
// 输入：grid = [[10]]
// 输出：10
// 解释：上图展示在每一步中需要移除的值。
// - 在第一步操作中，从第一行删除 10 。在答案上加 10 。
// 最终，答案 = 10 。

// 方法一：排序
// 由于每次操作都是从每一行中删除最大值，然后取最大值加到答案中，因此我们可以先对每一行进行降序排序。
// 此时题目等价于 每次删除矩阵的首列，得分为该列的最大值。
// 然后遍历每一列，依次取出每一列的最大值，然后将其加到答案中即可。
/**
 * @param {number[][]} grid
 * @return {number}
 */
var deleteGreatestValue = function (grid) {
  const m = grid.length;
  const n = grid[0].length;
  for (let row of grid) {
    row.sort((a, b) => b - a);
  }

  let ans = 0;
  for (let col = 0; col < n; col++) {
    let mx = 0; // 记录当且列最大值
    for (let row = 0; row < m; row++) {
      mx = Math.max(mx, grid[row][col]);
    }
    ans += mx;
  }
  return ans;
};
// 时间复杂度：O(m * n * logn)，m、n分别为矩阵 grid 的行列数，对矩阵的每一行排序的时间复杂度为 n * logn。共有 m 行，所以总的时间复杂度为 O(m * n * logn)。
// 空间复杂度：O(logn)，快排需要 O(logn) 的递归栈空间。
