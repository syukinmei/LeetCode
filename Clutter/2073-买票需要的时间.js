// 有 n 个人前来排队买票，其中第 0 人站在队伍 最前方 ，第 (n - 1) 人站在队伍 最后方 。
// 给你一个下标从 0 开始的整数数组 tickets ，数组长度为 n ，其中第 i 人想要购买的票数为 tickets[i] 。
// 每个人买票都需要用掉 恰好 1 秒 。一个人 一次只能买一张票 ，如果需要购买更多票，他必须走到  队尾 重新排队（瞬间 发生，不计时间）。如果一个人没有剩下需要买的票，那他将会 离开 队伍。
// 返回位于位置 k（下标从 0 开始）的人完成买票需要的时间（以秒为单位）。

// 输入：tickets = [2,3,2], k = 2
// 输出：6
// 解释：
//  - 队伍一开始为 [2,3,2]，第 k 个人以下划线标识。
//  - 在最前面的人买完票后，队伍在第 1 秒变成 [3,2,1]。
//  - 继续这个过程，队伍在第 2 秒变为[2,1,2]。
//  - 继续这个过程，队伍在第 3 秒变为[1,2,1]。
//  - 继续这个过程，队伍在第 4 秒变为[2,1]。
//  - 继续这个过程，队伍在第 5 秒变为[1,1]。
//  - 继续这个过程，队伍在第 6 秒变为[1]。第 k 个人完成买票，所以返回 6。

// 输入：tickets = [5,1,1,1], k = 0
// 输出：8
// 解释：
//  - 队伍一开始为 [5,1,1,1]，第 k 个人以下划线标识。
//  - 在最前面的人买完票后，队伍在第 1 秒变成 [1,1,1,4]。
//  - 继续这个过程 3 秒，队伍在第 4 秒变为[4]。
//  - 继续这个过程 4 秒，队伍在第 8 秒变为[]。第 k 个人完成买票，所以返回 8。

// n == tickets.length
// 1 <= n <= 100
// 1 <= tickets[i] <= 100
// 0 <= k < n

// 方法一：数学
// 为了计算第 k 个人买完票所需的时间，我们可以首先计算在这个过程中每个人买票所需的时间，再对这些时间求和得到答案。
// 思考一下，当第 k 个人完成买票的那一刻，队伍中其他人分别买了多少张票？
// 根据题意规定的「一个人一次只能买一张票 ，如果需要购买更多票，他必须走到队尾重新排队」，假设第 k 个人买了 3 张票，那么排在他前面的人，此时最多买了 3 张票，排在他后面的人，此时最多买了 2 张票。
// 一般地，当第 k 个人买了 tickets[k] 张票时有：
//  - 排在他前面的人，买的票数不会超过 min(min(tickets[k], tickets[i]))，其中 0 <= i <= k。
//  - 排在他后面的人，买的票数不会超过 min(min(tickets[k] - 1, tickets[i]))，其中 0 <= k < i。
// 遍历每个人的下标，按照上述方式计算每个人买票所需的时间和，即可得到第 k 个人买完票所需的时间。
/**
 * @param {number[]} tickets
 * @param {number} k
 * @return {number}
 */
var timeRequiredToBuy = function (tickets, k) {
    let res = 0; // 结果值
    // 遍历数组，统计当第 k 个人完成买票的那一刻，队伍中每个人所需要的买票时间
    for (let i = 0; i < tickets.length; i++) {
        // 位置在k之前的人
        if (i <= k) {
            res += Math.min(tickets[i], tickets[k]);
        } else {
            // 位置在k之后的人
            res += Math.min(tickets[i], tickets[k] - 1);
        }
    }
    return res;
};
// 时间复杂度：O(n)，n 为 tickets 的长度。需要遍历一次数组以计算每个人买票所需的时间。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
