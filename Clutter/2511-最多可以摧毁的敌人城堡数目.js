// 给你一个长度为 n ，下标从 0 开始的整数数组 forts ，表示一些城堡。forts[i] 可以是 -1 ，0 或者 1 ，其中：

//  - -1 表示第 i 个位置 没有 城堡。
//  - 0 表示第 i 个位置有一个 敌人 的城堡。
//  - 1 表示第 i 个位置有一个你控制的城堡。
// 现在，你需要决定，将你的军队从某个你控制的城堡位置 i 移动到一个空的位置 j ，满足：

//  - 0 <= i, j <= n - 1
//  - 军队经过的位置 只有 敌人的城堡。正式的，对于所有 min(i,j) < k < max(i,j) 的 k ，都满足 forts[k] == 0 。
// 当军队移动时，所有途中经过的敌人城堡都会被 摧毁 。

// 请你返回 最多 可以摧毁的敌人城堡数目。如果 无法 移动你的军队，或者没有你控制的城堡，请返回 0 。

// 输入：forts = [1,0,0,-1,0,0,0,0,1]
// 输出：4
// 解释：
// - 将军队从位置 0 移动到位置 3 ，摧毁 2 个敌人城堡，位置分别在 1 和 2 。
// - 将军队从位置 8 移动到位置 3 ，摧毁 4 个敌人城堡。
// 4 是最多可以摧毁的敌人城堡数目，所以我们返回 4 。

// 输入：forts = [0,0,1,-1]
// 输出：0
// 解释：由于无法摧毁敌人的城堡，所以返回 0 。

// tips：
// 其实题目翻译一下就是：找相邻的 1 和 -1 中间 0 的个数最多是多少个

// 方法一：双指针
// 题目背景讲了很多，实际我们要实现的就是 从一个 1 出发到达一个 -1 ，且中间全部为 0。求 中间 0 最多的情况。
// 由于 从一个 1 出发到达一个 -1 和 从一个 -1 出发到达一个 1，中间 0 的情况一定是一样的，因此我们不需要考虑方向的影响。
// 对于每个两个端点互为相反数的区间 [i, j]，其中间 0 的个数为 j - i - 1。
// 具体的：
// 使用指针 i 遍历 forts 数组，指针 j 从 i 的下一个位置开始往后遍历。
// 直到遇到第一个非 0 的位置，即 forts[j] !== 0
//  - forts[i] + forts[j] === 0 ，那么我们可以讲军队在 i 和 j 之间移动，摧毁 j - i - 1 个敌人城堡。
// 使用变量 maxCount 记录最多可以摧毁的敌人城堡数量。
/**
 * @param {number[]} forts
 * @return {number}
 */
var captureForts = function (forts) {
  let maxCount = 0; // 记录最多可以摧毁的敌人城堡数量
  let i = 0; // 定义左指针
  let n = forts.length;
  while (i < n && forts[i] === 0) i++; // 寻找第一个非 0 位置，从这里开始进行双指针往后遍历

  // 右指针向后遍历
  for (let j = i + 1; j < n; j++) {
    if (forts[j] !== 0) {
      if (forts[i] + forts[j] === 0) {
        // 更新距离
        maxCount = Math.max(maxCount, j - i - 1);
      }
      i = j; // 只要 forts[j] !== 0 就需要更新左指针 i，即上一个不为 0 的位置发生了变化
    }
  }
  return maxCount;
};
// 时间复杂度：O(n)，n 为数组 forts 的长度，在遍历 forts 时，每个元素只会被访问一次。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
