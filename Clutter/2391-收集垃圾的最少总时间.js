// 给你一个下标从 0 开始的字符串数组 garbage ，其中 garbage[i] 表示第 i 个房子的垃圾集合。garbage[i] 只包含字符 'M' ，'P' 和 'G' ，但可能包含多个相同字符，每个字符分别表示一单位的金属、纸和玻璃。垃圾车收拾 一 单位的任何一种垃圾都需要花费 1 分钟。
// 同时给你一个下标从 0 开始的整数数组 travel ，其中 travel[i] 是垃圾车从房子 i 行驶到房子 i + 1 需要的分钟数。
// 城市里总共有三辆垃圾车，分别收拾三种垃圾。每辆垃圾车都从房子 0 出发，按顺序 到达每一栋房子。但它们 不是必须 到达所有的房子。
// 任何时刻只有 一辆 垃圾车处在使用状态。当一辆垃圾车在行驶或者收拾垃圾的时候，另外两辆车 不能 做任何事情。
// 请你返回收拾完所有垃圾需要花费的 最少 总分钟数。

// 输入：garbage = ["G","P","GP","GG"], travel = [2,4,3]
// 输出：21
// 解释：
// 收拾纸的垃圾车：
// 1. 从房子 0 行驶到房子 1
// 2. 收拾房子 1 的纸垃圾
// 3. 从房子 1 行驶到房子 2
// 4. 收拾房子 2 的纸垃圾
// 收拾纸的垃圾车总共花费 8 分钟收拾完所有的纸垃圾。
// 收拾玻璃的垃圾车：
// 1. 收拾房子 0 的玻璃垃圾
// 2. 从房子 0 行驶到房子 1
// 3. 从房子 1 行驶到房子 2
// 4. 收拾房子 2 的玻璃垃圾
// 5. 从房子 2 行驶到房子 3
// 6. 收拾房子 3 的玻璃垃圾
// 收拾玻璃的垃圾车总共花费 13 分钟收拾完所有的玻璃垃圾。
// 由于没有金属垃圾，收拾金属的垃圾车不需要花费任何时间。
// 所以总共花费 8 + 13 = 21 分钟收拾完所有垃圾。

// 输入：garbage = ["MMM","PGM","GP"], travel = [3,10]
// 输出：37
// 解释：
// 收拾金属的垃圾车花费 7 分钟收拾完所有的金属垃圾。
// 收拾纸的垃圾车花费 15 分钟收拾完所有的纸垃圾。
// 收拾玻璃的垃圾车花费 15 分钟收拾完所有的玻璃垃圾。
// 总共花费 7 + 15 + 15 = 37 分钟收拾完所有的垃圾。

// 方法一：前缀和一次遍历
// 由于 **任意时刻只有一辆车处于使用状态** ，所以可以将处理三类垃圾的车进行「分类讨论」。以处理垃圾 "M" 的车为例，消耗的时间包括：
//  - （处理垃圾时间）处理 garbage 中所有垃圾 "M" 的时间，即字符串数组 garbage 中字符 "M" 的数量。
//  - （垃圾车行驶时间）设 garbage 中最后一次出现垃圾 "M" 的下标为 index，将垃圾车移动到该处消耗的时间即为：travel[0] + ... +travel[index-1]。因为后面没有类型 "M" 的垃圾了不需要在行驶了。
// 对于所有垃圾的处理时间即为：字符串数组 garbage 中所有字符串的长度和。
// 对于垃圾车行驶所需的时间，我们可以使用「前缀和」的思想处理，并用「哈希表」及时的更新处理每类垃圾车的行驶消耗时间。

/**
 * @param {string[]} garbage
 * @param {number[]} travel
 * @return {number}
 */
var garbageCollection = function (garbage, travel) {
    // 不同垃圾车行驶消耗的时间映射表
    const distance = new Map(); // key 为垃圾类型，value 为其行驶消耗的时间

    let requiredTime = 0; // 收拾完所有垃圾需要时间
    let curDis = 0; // 行驶到当前位置所需时间（即 travel 的前缀和）
    for (let i = 0; i < garbage.length; i++) {
        // 累计处理垃圾的时间
        requiredTime += garbage[i].length;

        // 利用「前缀和」的思想构建不同垃圾车行驶消耗的时间映射表
        if (i > 0) {
            curDis += travel[i - 1];
        }
        for (const c of garbage[i]) {
            distance.set(c, curDis);
        }
    }

    // 累计每类垃圾车行驶消耗的时间
    for (const [_, value] of distance) {
        requiredTime += value;
    }

    // 返回收拾完所有垃圾需要花费的总分钟数
    return requiredTime;
};
// 时间复杂度：O(nm)，n 为 garbage 的长度，m 为 garbage[i] 的长度，nm 即为垃圾数量，需要遍历字符串数组 garbage 中字符各一次。
// 空间复杂度：O(C)，C 为垃圾的类型数，本题 C=3，需要使用哈希表存储每类垃圾车行驶消耗的时间（到达每类垃圾最后一次出现的位置所需的时间）。
