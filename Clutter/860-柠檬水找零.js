// 在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。
// 每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。
// 注意，一开始你手头没有任何零钱。
// 给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。

// 输入：bills = [5,5,5,10,20]
// 输出：true
// 解释：
// 前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
// 第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
// 第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
// 由于所有客户都得到了正确的找零，所以我们输出 true。

// 输入：bills = [5,5,10,10,20]
// 输出：false
// 解释：
// 前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。
// 对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。
// 对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。
// 由于不是每位顾客都得到了正确的找零，所以答案是 false。

// 提示：
// 1 <= bills.length <= 105
// bills[i] 不是 5 就是 10 或是 20


// 方法一：贪心
// 基于题意，根据客户给的钞票面值分类讨论
//  - 5 美元，无需找零，直接收下即可。
//  - 10美元，需要找零5美元，如果没有5美元面值的钞票则返回 false。
//  - 20美元，需要找零15美元，此时有2种找零方式：1张5美元 + 1张10美元 或者 3张5美元。当两种组合方式都没有时则无法找零返回 false。可以找零时，更倾向于 1张5美元+1张10美元的组合，因为需要使用5美元找零的长期会更多，我们需要尽可能的保留5美元。
// 具体的，我们维护两个变量 five 和 ten 表示当前拥有的5美元和10美元面值的钞票数量，从前往后遍历 bills 数组进行分类讨论即可。
/**
 * @param {number[]} bills
 * @return {boolean}
 */
var lemonadeChange = function (bills) {
  let five = 0,
    ten = 0; // 5美元和10美元的钞票数量
  for (let bill of bills) {
    if (bill === 5) five++; // 顾客给5美元钞票，则直接收下
    else if (bill === 10) {
      if (five === 0) return false; // 美元5美元钞票可找零
      five--; // 用掉一张5美元钞票于找零
      ten++; // 收下一张10美元钞票
    } else if (bill === 20) {
      if (five > 0 && ten > 0) {
        // 如果有1张10美元钞票和1张5美元钞票可找零
        // 5美元、10美元钞票各用掉一张于找零
        five--;
        ten--;
      } else if (five >= 3) five -= 3; // 如果有3张或者更多5美元钞票也可找零
      else return false; // 无法找零
    }
  }
  return true; // 成功找零给所有顾客，返回true
};
// 时间复杂度：O(n)，n 为数组 bills 的长度，需要遍历一次 bills 数组。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
