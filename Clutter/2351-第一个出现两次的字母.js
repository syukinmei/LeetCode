// 给你一个由小写英文字母组成的字符串 s ，请你找出并返回第一个出现 两次 的字母。
// 注意：
//  - 如果 a 的 第二次 出现比 b 的 第二次 出现在字符串中的位置更靠前，则认为字母 a 在字母 b 之前出现两次。
//  - s 包含至少一个出现两次的字母。


// 输入：s = "abccbaacz"
// 输出："c"
// 解释：
// 字母 'a' 在下标 0 、5 和 6 处出现。
// 字母 'b' 在下标 1 和 4 处出现。
// 字母 'c' 在下标 2 、3 和 7 处出现。
// 字母 'z' 在下标 8 处出现。
// 字母 'c' 是第一个出现两次的字母，因为在所有字母中，'c' 第二次出现的下标是最小的。


// 输入：s = "abcdd"
// 输出："d"
// 解释：
// 只有字母 'd' 出现两次，所以返回 'd' 。


/**
 * @param {string} s
 * @return {character}
 */
// 方法一：哈希表
// 我们可以使用一个哈希表记录每个字母是否出现过。
// 具体地，我们对字符串 s 进行一次遍历。对于每一个字母 c ，查看哈希表中是否存在，存在则返回 c 作为答案即可。否则，我们将 c 加入哈希表中。
var repeatedCharacter = function (s) {
    let dic = new Set();
    for (let c of s) {
        if (dic.has(c)) return c;
        dic.add(c);
    }
};
// 时间复杂度：O(n)，n 为字符串 s 的长度，我们最多需要遍历一次字符串 s 。
// 空间复杂度：O(∣Σ∣)，Σ 为字符集，本题中字符串只包含小写字母，因此 ∣Σ∣ = 26 。即为哈希表所需要的空间。



// 方法二：状态压缩
// 主要到字符集的大小为 26，因此我们可以使用一个 32 位的二进制数 seen 完美地存储哈希表。如果 seen 的第 i (0<=i<=26)位是 1。说明第 i 个小写字母已经出现过了。
// 具体地，我们对字符串 s 进行一次遍历。对于每一个字母 c，记它是第 i 个字母，seen 的第 i (0<=i<=26)位是 1，我们返回 c 作为答案即可。否则，我们将 seen 的第 i 位置设置为 1。
var repeatedCharacter = function(s) {
    let seen = 0;
    for (let i = 0; i < s.length; i++) {
        const ch = s[i];
        const x = ch.charCodeAt() - 'a'.charCodeAt();
        if ((seen & (1 << x)) !== 0) {
            return ch;
        }
        seen |= (1 << x);
    }
};
// 时间复杂度：O(n)，n 为字符串 s 的长度，我们最多需要遍历一次字符串 s 。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
