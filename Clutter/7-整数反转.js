// 给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。
// 如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。
// 假设环境不允许存储 64 位整数（有符号或无符号）。

// 输入：x = 123
// 输出：321

// 输入：x = -123
// 输出：-321

// 输入：x = 120
// 输出：21

// 输入：x = 0
// 输出：0


/**
 * @param {number} x
 * @return {number}
 */
// 方法一：数学
// 思路：记 res 为翻转后的数字，为完成翻转，我们可以重复「弹出」x 的末尾数字，将其「推入」res 的末尾，直至 x 为 0。
// 要在没有辅助栈或数组的帮助下「弹出」和「推入」数字，我们可以使用如下数学方法：
//  - 弹出 x 的末尾数字 digit
//      digit = x % 10
//      x /= 10
//  - 将数字 digit 推入 rev 末尾
//      rev = rev * 10 + digit
var reverse = function (x) {
    // 判断整数 x 是否为负数
    if (x < 0) {
        return -1 * reverse(-x);
    }
    let res = 0;
    while (x !== 0) {
        res = res * 10 + x % 10;
        x = (x - x % 10) / 10;
        // 判断是否超范围
        if (res > Math.pow(2, 31) - 1) {
            return 0;
        }
    }
    return res;
};
// 时间复杂度：O(log|x|)，翻转的次数即为 x 的十进制的位数。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。