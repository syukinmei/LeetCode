// 你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。
// 比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：

//  1. 整数 x - 表示本回合新获得分数 x
//  2. "+" - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。
//  3. "D" - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。
//  4. "C" - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。

// 请你返回记录中所有得分的总和。

// 输入：ops = ["5","2","C","D","+"]
// 输出：30
// 解释：
// "5" - 记录加 5 ，记录现在是 [5]
// "2" - 记录加 2 ，记录现在是 [5, 2]
// "C" - 使前一次得分的记录无效并将其移除，记录现在是 [5].
// "D" - 记录加 2 * 5 = 10 ，记录现在是 [5, 10].
// "+" - 记录加 5 + 10 = 15 ，记录现在是 [5, 10, 15].
// 所有得分的总和 5 + 10 + 15 = 30

// 输入：ops = ["5","-2","4","C","D","9","+","+"]
// 输出：27
// 解释：
// "5" - 记录加 5 ，记录现在是 [5]
// "-2" - 记录加 -2 ，记录现在是 [5, -2]
// "4" - 记录加 4 ，记录现在是 [5, -2, 4]
// "C" - 使前一次得分的记录无效并将其移除，记录现在是 [5, -2]
// "D" - 记录加 2 * -2 = -4 ，记录现在是 [5, -2, -4]
// "9" - 记录加 9 ，记录现在是 [5, -2, -4, 9]
// "+" - 记录加 -4 + 9 = 5 ，记录现在是 [5, -2, -4, 9, 5]
// "+" - 记录加 9 + 5 = 14 ，记录现在是 [5, -2, -4, 9, 5, 14]
// 所有得分的总和 5 + -2 + -4 + 9 + 5 + 14 = 27

// 输入：ops = ["1"]
// 输出：1

// 方法一：栈 + 模拟
// 1. 使用栈记录得分：过去几回合的得分可能会影响以后几回合的得分，栈的数据结构可以帮助我们计算每回和得分时更方便地获取最近的记录。
// 2. 遍历操作列表：根据每个操作的类型进行相应的处理：
//  - 对于 整数 操作，直接将分数压入栈中。
//  - 对于 "+" 操作，将前两轮的得分之和压入栈中。
//  - 对于 "D" 操作，将前一轮的得分的两倍压入栈中。
//  - 对于 "C" 操作，将前一轮的得分从栈中移除。
// 3. 计算总得分：遍历完所有操作后，栈中剩下的所有元素即为有效得分，将其累加即总得分。
/**
 * @param {string[]} operations
 * @return {number}
 */
var calPoints = function (operations) {
    const stack = []; // 用于存储历史有效得分

    //  模拟赛程推进，分析每个回合的得分情况
    for (let op of operations) {
        let curScore = 0; // 本回和得分
        switch (op) {
            case "+":
                // 将前两轮得分和入栈
                curScore = stack[stack.length - 1] + stack[stack.length - 2];
                stack.push(curScore);
                break;
            case "D":
                // 将前一轮得分的两倍入栈
                curScore = stack[stack.length - 1] * 2;
                stack.push(curScore);
                break;
            case "C":
                // 前一轮得分无效，将前一轮的得分出栈
                stack.pop();
                break;
            default:
                // 整数为直接得分，将本轮直接得分入栈
                stack.push(parseInt(op));
        }
    }
    //  计算总得分
    return stack.reduce((acc, cur) => acc + cur, 0);
};
// 时间复杂度：O(n)，n 为操作列表 operations 的长度，需要对其进行一次遍历以模拟比赛进程的得分情况。
// 空间复杂度：O(n)，n 为操作列表 operations 的长度，为存储有效得分的栈的空间消耗。
