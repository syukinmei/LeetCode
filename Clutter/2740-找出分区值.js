// 给你一个 正 整数数组 nums 。
// 将 nums 分成两个数组：nums1 和 nums2 ，并满足下述条件：

//  - 数组 nums 中的每个元素都属于数组 nums1 或数组 nums2 。
//  - 两个数组都 非空 。
//  - 分区值 最小 。

// 分区值的计算方法是 |max(nums1) - min(nums2)| 。
// 其中，max(nums1) 表示数组 nums1 中的最大元素，min(nums2) 表示数组 nums2 中的最小元素。
// 返回表示分区值的整数。

// 输入：nums = [1,3,2,4]
// 输出：1
// 解释：可以将数组 nums 分成 nums1 = [1,2] 和 nums2 = [3,4] 。
// - 数组 nums1 的最大值等于 2 。
// - 数组 nums2 的最小值等于 3 。
// 分区值等于 |2 - 3| = 1 。
// 可以证明 1 是所有分区方案的最小值。

// 输入：nums = [100,1,10]
// 输出：9
// 解释：可以将数组 nums 分成 nums1 = [10] 和 nums2 = [100,1] 。
// - 数组 nums1 的最大值等于 10 。
// - 数组 nums2 的最小值等于 1 。
// 分区值等于 |10 - 1| = 9 。
// 可以证明 9 是所有分区方案的最小值。

// 方法一：排序
// 令 n 为数组 nums 的元素个数，由题意可知，分区值必定为数组 nums 的两个不同元素的绝对差，因此我们可以将数组从小到大进行排序，那么分区值的理论最小值必定为排序后数组相邻元素绝对差的最小值。
// 假设理论最小值对应两个相邻元素分别为 nums[i] 和 nums[i+1]，那么我们可以将区间 [0, i] 的元素分到 nums1，将区间 [i+1, n-1] 的元素分到 nums2，那么理论分区最小值 |nums[i] - nums[i+1]| 就是实际分区最小值。
// 根据以上分析，我们只需要将数组 nums 从小到大进行排序，然后枚举每个可能的分割点求得数组相邻元素绝对差的最小值即可。
/**
 * @param {number[]} nums
 * @return {number}
 */
var findValueOfPartition = function (nums) {
    nums.sort((a, b) => a - b); // 升序排序

    let res = Infinity; // 初始化分区值为无穷大

    // 遍历所有可能的分割点
    for (let i = 1; i < nums.length; i++) {
        // 更新最小分区值
        res = Math.min(res, nums[i] - nums[i - 1]);
    }

    return res;
};
// 时间复杂度：O(nlogn)，n 为数组 nums 的长度，排序需要 O(nlogn) 的时间，遍历所有可能的分割点需要 O(n) 的时间。
// 空间复杂度：O(logn)，排序需要 O(logn) 的递归调用栈空间。
