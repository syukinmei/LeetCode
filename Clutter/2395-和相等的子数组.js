// 给你一个下标从 0 开始的整数数组 nums ，判断是否存在 两个 长度为 2 的子数组且它们的 和 相等。注意，这两个子数组起始位置的下标必须 不相同 。
// 如果这样的子数组存在，请返回 true，否则返回 false 。
// 子数组 是一个数组中一段连续非空的元素组成的序列。

// 输入：nums = [4,2,4]
// 输出：true
// 解释：元素为 [4,2] 和 [2,4] 的子数组有相同的和 6 。

// 输入：nums = [1,2,3,4,5]
// 输出：false
// 解释：没有长度为 2 的两个子数组和相等。

// 输入：nums = [0,0,0]
// 输出：true
// 解释：子数组 [nums[0],nums[1]] 和 [nums[1],nums[2]] 的和相等，都为 0 。
// 注意即使子数组的元素相同，这两个子数组也视为不相同的子数组，因为它们在原数组中的起始位置不同。

// 方法一：哈希集合枚举
// 对数组进行一次遍历，当遍历到第 i 个元素时，计算 nums[i] + nums[i+1] 的值，并判断该值是否出现过即可。
// 具体的：遍历数组 nums，用哈希集合 vis 记录数组中每两个相邻元素的和，如果当前元素和下一个元素的和已经存在于哈希集合中，则返回 true，否则将当前的和 sum 存入集合中。遍历结束后，说明没有找到满足条件的两个子数组，返回 false。
/**
 * @param {number[]} nums
 * @return {boolean}
 */
var findSubarrays = function (nums) {
  const n = nums.length;
  const vis = new Set();
  for (let i = 0; i < n - 1; i++) {
    const sum = nums[i] + nums[i + 1];
    if (vis.has(sum)) return true;
    vis.add(sum);
  }
  return false;
};
// 时间复杂度：O(n)，n 为数组 nums 的长度，需要对数组进行一次遍历。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
