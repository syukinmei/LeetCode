// 给定 N 个无限容量且初始均空的水缸，每个水缸配有一个水桶用来打水，第 i 个水缸配备的水桶容量记作 bucket[i]。小扣有以下两种操作：
//  - 升级水桶：选择任意一个水桶，使其容量增加为 bucket[i]+1
//  - 蓄水：将全部水桶接满水，倒入各自对应的水缸
// 每个水缸对应最低蓄水量记作 vat[i]，返回小扣至少需要多少次操作可以完成所有水缸蓄水要求。
// 注意：实际蓄水量 达到或超过 最低蓄水量，即完成蓄水要求。

// 输入：bucket = [1,3], vat = [6,8]
// 输出：4
// 解释：
// 第 1 次操作升级 bucket[0]；
// 第 2 ~ 4 次操作均选择蓄水，即可完成蓄水要求。

// 输入：bucket = [9,0,1], vat = [0,2,2]

// 输出：3

// 解释：
// 第 1 次操作均选择升级 bucket[1]
// 第 2~3 次操作选择蓄水，即可完成蓄水要求。

// tips:
// 1 <= bucket.length == vat.length <= 100
// 0 <= bucket[i], vat[i] <= 10^4

// 方法一：贪心+枚举
// 题目涉及两个操作：升级水桶、蓄水。显然我们应该贪心地把升级水桶的操作放在前面，这样每次蓄水时的收益是最大的，操作次数就会更少。
// 已知最终 「蓄水」的次数为 k 次，则对于每桶水缸的水桶 bucket[i] 在「蓄水」操作前其容量最少需要达到 mi = Math.cal(vat[i] / k)。
// 此时对于这个水桶需要 「升级水桶」的操作次数为 Math.max(0, mi - bucket[i])
// 我们将所有水桶的升级次数累加，记为 t，再加上蓄水次数 k，则总的操作次数为 t+k。答案为所有 t + k 的最小值。

/**
 * @param {number[]} bucket
 * @param {number[]} vat
 * @return {number}
 */
var storeWater = function (bucket, vat) {
  const max_k = Math.max(...vat); // 获取最大的水缸
  if (max_k === 0) return 0; // 最大元素为0，说明不需要蓄水，直接返回0
  let res = Number.MAX_SAFE_INTEGER; // 用于维护最小的操作次数
  // 设最终蓄水需要 k 次，我们枚举需要多次「升级水桶」的操作。
  // 枚举蓄水次数k，k ∈ [1, max(vat)]，「蓄水」操作次数一定不会大于全部水缸的最大最低蓄水量。并且 当 k 大于等于 当前已经得到的最小操作次数时，可以提前结束枚举。
  for (let k = 1; k <= max_k && k < res; k++) {
    let t = 0; // 记录蓄水k次的前提下，需要「升级水桶」的操作次数
    for (let i = 0; i < bucket.length; i++) {
      // 计算当前水桶需要升级的次数
      const mi = Math.ceil(vat[i] / k) - bucket[i];
      t += Math.max(0, mi);
    }
    // 更新操作的最少次数
    res = Math.min(res, t + k);
  }
  return res;
};
// 时间复杂度：O(n*m)，n 为数组 bucket 的长度，m 为数组 vat 中的最大值。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
