// 给你一个字符串 s ，由 n 个字符组成，每个字符不是 'X' 就是 'O' 。
// 一次 操作 定义为从 s 中选出 三个连续字符 并将选中的每个字符都转换为 'O' 。注意，如果字符已经是 'O' ，只需要保持 不变 。
// 返回将 s 中所有字符均转换为 'O' 需要执行的 最少 操作次数。


// 输入：s = "XXX"
// 输出：1
// 解释：XXX -> OOO
// 一次操作，选中全部 3 个字符，并将它们转换为 'O' 。

// 输入：s = "XXOX"
// 输出：2
// 解释：XXOX -> OOOX -> OOOO
// 第一次操作，选择前 3 个字符，并将这些字符转换为 'O' 。
// 然后，选中后 3 个字符，并执行转换。最终得到的字符串全由字符 'O' 组成。

// 输入：s = "OOOO"
// 输出：0
// 解释：s 中不存在需要转换的 'X' 。


// 方法一：贪心
// 遍历字符串，只要遇到 'X'，指针 i 就直接往后移动 2 格，并将操作次数累加1。
// 因为一次操作最多改3个，所以后两个不管是不是 'X' 都直接一起修改即可，所以 i 指针需要往后移动 2 格。
/**
 * @param {string} s
 * @return {number}
 */
var minimumMoves = function (s) {
    let i = 0;
    let count = 0;
    while (i < s.length) {
        if (s[i] === 'X') {
            i += 2;
            count++;
        }
        i++;
    }
    return count;
};
// 时间复杂度：O(n)，n 为字符串 s 的长度，最多需要完整的遍历一次字符串。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
