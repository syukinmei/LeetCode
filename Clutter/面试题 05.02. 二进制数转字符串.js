// 二进制数转字符串。给定一个介于0和1之间的实数（如0.72），类型为double，打印它的二进制表达式。如果该数字无法精确地用32位以内的二进制表示，则打印“ERROR”。

// 输入：0.625
// 输出："0.101"

// 输入：0.1
// 输出："ERROR"
// 提示：0.1无法被二进制准确表示

// 提示：
// 32位包括输出中的 "0." 这两位。
// 题目保证输入用例的小数位数最多只有 6 位

// 知识补充：
// 十进制数转换为二进制数时，由于整数和小数的转换方法不同，所以先将十进制数的整数部分和小数部分分别转换后，再加以合并。

// 十进制整数转换为二进制整数采用"除2取余，逆序排列"法。
// 具体做法是：用2整除十进制整数，可以得到一个商和余数；再用2去除商，又会得到一个商和余数，如此进行，直到商为小于1时为止，然后把先得到的余数作为二进制数的低位有效位，后得到的余数作为二进制数的高位有效位，依次排列起来。

// 十进制小数转换成二进制小数采用"乘2取整，顺序排列"法。
// 具体做法是：用2乘十进制小数，可以得到积，将积的整数部分取出，再用2乘余下的小数部分，又得到一个积，再将积的整数部分取出，如此进行，直到积中的小数部分为零，此时0或1为二进制的最后一位。或者达到所要求的精度为止。然后把取出的整数部分按顺序排列起来，先取的整数作为二进制小数的高位有效位，后取的整数作为低位有效位。

/**
 * @param {number} num
 * @return {string}
 */
// 由于这道题要求二进制表示的长度最多为 32 位，否则返回 "ERROR"，因此不需要判断给定实数的二进制表示的结果是有限小数还是无限循环小数，而是在小数部分变成 0 或者二进制表示的长度超过 32 位时结束操作。当操作结束时，如果二进制表示的长度不超过 32 位则返回二进制表示，否则返回 "ERROR"。
var printBin = function (num) {
  let ans = "0.";
  while (ans.length <= 32 && num !== 0) {
    num *= 2; // 乘2
    const digit = Math.floor(num); // 获取整数部分
    ans += digit;
    num -= digit; // 获取小数部分
  }
  // 判断是否可以精确地用32位以内的二进制表示。
  return ans.length <= 32 ? ans : "ERROR";
};
// 时间复杂度：O(C)，C 为结果字符串 ans 的最大长度，C=32。最多计算32位，每一位计算的时间为O(1)，因此总时间复杂度为O(C)。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。

