// 给你一个字符串 s 和一个整数 k 。
// 定义函数 distance(s1, s2) ，用于衡量两个长度为 n 的字符串 s1 和 s2 之间的距离，即：
//  - 字符 'a' 到 'z' 按 循环 顺序排列，对于区间 [0, n - 1] 中的 i ，计算所有「 s1[i] 和 s2[i] 之间 最小距离」的 和 。

// 例如，distance("ab", "cd") == 4 ，且 distance("a", "z") == 1 。
// 你可以对字符串 s 执行 任意次 操作。在每次操作中，可以将 s 中的一个字母 改变 为 任意 其他小写英文字母。
// 返回一个字符串，表示在执行一些操作后你可以得到的 字典序最小 的字符串 t ，且满足 distance(s, t) <= k 。

// 输入：s = "zbbz", k = 3
// 输出："aaaz"
// 解释：在这个例子中，可以执行以下操作：
// 将 s[0] 改为 'a' ，s 变为 "abbz" 。
// 将 s[1] 改为 'a' ，s 变为 "aabz" 。
// 将 s[2] 改为 'a' ，s 变为 "aaaz" 。
// "zbbz" 和 "aaaz" 之间的距离等于 k = 3 。
// 可以证明 "aaaz" 是在任意次操作后能够得到的字典序最小的字符串。
// 因此，答案是 "aaaz" 。

// 输入：s = "xaxcd", k = 4
// 输出："aawcd"
// 解释：在这个例子中，可以执行以下操作：
// 将 s[0] 改为 'a' ，s 变为 "aaxcd" 。
// 将 s[2] 改为 'w' ，s 变为 "aawcd" 。
// "xaxcd" 和 "aawcd" 之间的距离等于 k = 4 。
// 可以证明 "aawcd" 是在任意次操作后能够得到的字典序最小的字符串。
// 因此，答案是 "aawcd" 。

// 输入：s = "lol", k = 0
// 输出："lol"
// 解释：在这个例子中，k = 0，更改任何字符都会使得距离大于 0 。
// 因此，答案是 "lol" 。

// 方法一：贪心
// 题意等价于：
//  - 我们可以对给定的字符串 s 最多进行 k 次操作。
//  - 每次操作，可以选择字符串 s 中的一个字母，变成字典序中前一个或者后一个字母。这里额外规定来 a 的前一个字母是 z。
//  - 求可以得到的字典序最小的字符串。

// 想要字典序最小，我们应当优先修改下标小的字符。
// 因此，我们可以使用贪心算法，从左到右的顺序，依次处理字符串 s 中的每个字符，对于 s[i]：
//  - 如果剩余的操作次数足够，我们就将 s[i] 修改为 a。这里需要点操作次数为 s[i] 与 a 的距离以及 s[i] 与 z 的距离加一的较小值。
//  - 如果剩余的操作次数不够，我们使用所有的操作次数，将 s[i] 修改得尽可能小，同时结束遍历。

// tips：
// 实际代码中，为什么方便修改字符串，我们将字符串 s 进行 split 为数组，然后对数组进行修改，最后使用 join 进行组合。
/**
 * @param {string} s
 * @param {number} k
 * @return {string}
 */
var getSmallestString = function (s, k) {
    s = s.split("");
    for (let i = 0; i < s.length; i++) {
        // 修改为 a 的操作次数，即 s[i] 和 'a' 的距离
        const dis = Math.min(
            s[i].charCodeAt(0) - "a".charCodeAt(0),
            "z".charCodeAt(0) - s[i].charCodeAt(0) + 1
        );
        if (dis <= k) {
            // 操作次数足够
            s[i] = "a";
            k -= dis;
        } else {
            // 操作次数不足，修改为最小后跳出循环
            s[i] = String.fromCharCode(s[i].charCodeAt(0) - k);
            break;
        }
    }
    return s.join(""); // 返回字典序最小的字符串
};
// 时间复杂度：O(n)，n 为字符串 s 的长度。
// 空间复杂度：O(n)，为修改字符串所要使用的额外空间。
