// 国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如:

//  - 'a' 对应 ".-" ，
//  - 'b' 对应 "-..." ，
//  - 'c' 对应 "-.-." ，以此类推。
// 为了方便，所有 26 个英文字母的摩尔斯密码表如下：

// [".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
// 给你一个字符串数组 words ，每个单词可以写成每个字母对应摩尔斯密码的组合。

//  - 例如，"cab" 可以写成 "-.-..--..." ，(即 "-.-." + ".-" + "-..." 字符串的结合)。我们将这样一个连接过程称作 单词翻译 。
// 对 words 中所有单词进行单词翻译，返回不同 单词翻译 的数量。


// 输入: words = ["gin", "zen", "gig", "msg"]
// 输出: 2
// 解释: 
// 各单词翻译如下:
// "gin" -> "--...-."
// "zen" -> "--...-."
// "gig" -> "--...--."
// "msg" -> "--...--."

// 共有 2 种不同翻译, "--...-." 和 "--...--.".


// 输入：words = ["a"]
// 输出：1


/**
 * @param {string[]} words
 * @return {number}
 */
// 方法一：哈希表
// 将数组 words 中的每个单词按照摩尔斯密码表转换为摩尔斯码，并加入 set 表中，利用 set 表的唯一性进行去重，最终结果为 set 表中元素的个数。
var uniqueMorseRepresentations = function (words) {
    const MORSE = [".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."];
    const set = new Set();
    for (const word of words) {
        let code = '';
        for (const ch of word) {
            code += MORSE[ch.charCodeAt() - 'a'.charCodeAt()];
        }
        set.add(code);
    }
    return set.size;
};
// 时间复杂度：O(S)，S 为数组 words 中所有单词的长度之和。
// 空间复杂度：O(S)，S 为数组 words 中所有单词的长度之和。
