// 给你一个字符串形式的电话号码 number 。number 由数字、空格 ' '、和破折号 '-' 组成。

// 请你按下述方式重新格式化电话号码。

// 首先，删除 所有的空格和破折号。
// 其次，将数组从左到右 每 3 个一组 分块，直到 剩下 4 个或更少数字。剩下的数字将按下述规定再分块：
// 2 个数字：单个含 2 个数字的块。
// 3 个数字：单个含 3 个数字的块。
// 4 个数字：两个分别含 2 个数字的块。
// 最后用破折号将这些块连接起来。注意，重新格式化过程中 不应该 生成仅含 1 个数字的块，并且 最多 生成两个含 2 个数字的块。

// 返回格式化后的电话号码。


// 输入：number = "1-23-45 6"
// 输出："123-456"
// 解释：数字是 "123456"
// 步骤 1：共有超过 4 个数字，所以先取 3 个数字分为一组。第 1 个块是 "123" 。
// 步骤 2：剩下 3 个数字，将它们放入单个含 3 个数字的块。第 2 个块是 "456" 。
// 连接这些块后得到 "123-456" 。


// 输入：number = "123 4-567"
// 输出："123-45-67"
// 解释：数字是 "1234567".
// 步骤 1：共有超过 4 个数字，所以先取 3 个数字分为一组。第 1 个块是 "123" 。
// 步骤 2：剩下 4 个数字，所以将它们分成两个含 2 个数字的块。这 2 块分别是 "45" 和 "67" 。
// 连接这些块后得到 "123-45-67" 。


// 输入：number = "123 4-5678"
// 输出："123-456-78"
// 解释：数字是 "12345678" 。
// 步骤 1：第 1 个块 "123" 。
// 步骤 2：第 2 个块 "456" 。
// 步骤 3：剩下 2 个数字，将它们放入单个含 2 个数字的块。第 3 个块是 "78" 。
// 连接这些块后得到 "123-456-78" 。


/**
 * @param {string} number
 * @return {string}
 */
// 方法一：模拟
// 首先将 number 转纯数字字符串 digits ，然后遍历一次 digits ，在遍历过程中，维护剩余的数字数量 residue 以及当前遍历的字符下标 n。
//  - 当 n > 4，取出3个连续的字符，作为一个块。
//  - 当 n <= 4，根据题意，将剩余的 n 个字符进行分块，并结束遍历。
var reformatNumber = function (number) {
    // 去掉特殊字符
    // let digits = number.replace(/[-,' ']/g, ''); // 
    let digits = '';
    for (let i = 0; i < number.length; i++) {
        const ch = number[i];
        if (isNumber(ch)) {
            digits += ch;
        }
    }
    // 格式化
    let residue = digits.length; // 剩余数字个数
    let n = 0; // 当前遍历下标
    let ans = '';
    while (residue > 0) {
        if (residue > 4) {
            ans += digits.slice(n, n + 3) + '-';
            residue -= 3;
            n += 3;
        } else {
            if (residue === 4) {
                ans += digits.slice(n, n + 2) + '-' + digits.slice(n + 2, n + 4);
                residue = 0;
            } else {
                ans += digits.slice(n, n + residue);
                residue = 0;
            }
        }
    }
    return ans;
};

// 判断是否为数字
const isNumber = function (ch) {
    return parseFloat(ch).toString() !== 'NaN'
}
// 时间复杂度：O(n)，n为 number 字符串的长度。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
