// 给你一个整数数组 arr ，请使用 煎饼翻转 完成对数组的排序。
// 一次煎饼翻转的执行过程如下：
//  - 选择一个整数 k ，1 <= k <= arr.length
//  - 反转子数组 arr[0...k-1]（下标从 0 开始）
//  - 例如，arr = [3,2,1,4] ，选择 k = 3 进行一次煎饼翻转，反转子数组 [3,2,1] ，得到 arr = [1,2,3,4] 。
// 以数组形式返回能使 arr 有序的煎饼翻转操作所对应的 k 值序列。任何将数组排序且翻转次数在 10 * arr.length 范围内的有效答案都将被判断为正确。

// 输入：[3,2,4,1]
// 输出：[4,2,4,3]
// 解释：
// 我们执行 4 次煎饼翻转，k 值分别为 4，2，4，和 3。
// 初始状态 arr = [3, 2, 4, 1]
// 第一次翻转后（k = 4）：arr = [1, 4, 2, 3]
// 第二次翻转后（k = 2）：arr = [4, 1, 2, 3]
// 第三次翻转后（k = 4）：arr = [3, 2, 1, 4]
// 第四次翻转后（k = 3）：arr = [1, 2, 3, 4]，此时已完成排序。 

// 输入：[1,2,3]
// 输出：[]
// 解释：
// 输入已经排序，因此不需要翻转任何内容。
// 请注意，其他可能的答案，如 [3，3] ，也将被判断为正确。


// 思路：
// 设一个元素的下标是 index，我们可以通过两次煎饼排序将它放到尾部：
//  - 第一步：选择 k = index + 1 ，然后反转子数组arr[0...k-1] ，此时该元素位于数组首部。
//  - 第二步：选择 k = n ，n 为数组 arr 的长度，即反转整个数组，此时该元素位于数组尾部。
// 通过以上两步操作，我们可以将当前数组的最大值放到尾部，然后将去掉尾部元素的数组作为新的处理对象，重复以上操作，直到处理对象的长度等于一，此时原数组已经完成排序。需要的总操作数是 2*(n-1) 。

/**
 * @param {number[]} arr
 * @return {number[]}
 */
var pancakeSort = function (arr) {
    const res = [];
    for (let n = arr.length - 1; n > 0; n--) {
        // 寻找当前处理对象中最大元素
        let index = 0;
        for (let j = 1; j <= n; j++) {
            if (arr[j] > arr[index]) index = j;
        }
        // 判断需要反转的元素是否位于当前处理对象的尾部，如果是则跳过不需要反转操作
        if (index === n) continue;
        reverse(arr, index);
        reverse(arr, n);
        res.push(index + 1);
        res.push(n + 1);
    }
    return res;
};
// 辅助函数
const reverse = function (arr, endIndex) {
    for (let i = 0, j = endIndex; i < j; i++, j--) {
        let temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
// 时间复杂度：O(n^2)，n 为数组 arr 的长度，总共执行至多 n-1 次查找最大值，至多 2*(n-1) 次反转数组，而查找最大值的时间复杂度是O(n)，反转数组的时间复杂度是O(n)，因此总时间复杂度是O(n^2)。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
