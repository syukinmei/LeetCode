// 给你一个整数 finalSum 。请你将它拆分成若干个 互不相同 的正偶数之和，且拆分出来的正偶数数目 最多 。

// - 比方说，给你 finalSum = 12 ，那么这些拆分是 符合要求 的（互不相同的正偶数且和为 finalSum）：
//   (2 + 10) ，(2 + 4 + 6) 和 (4 + 8) 。
//   它们中，(2 + 4 + 6) 包含最多数目的整数。注意 finalSum 不能拆分成 (2 + 2 + 4 + 4) ，因为拆分出来的整数必须互不相同。

// 请你返回一个整数数组，表示将整数拆分成 最多 数目的正偶数数组。如果没有办法将 finalSum 进行拆分，请你返回一个 空 数组。你可以按 任意 顺序返回这些整数。

// 输入：finalSum = 12
// 输出：[2,4,6]
// 解释：以下是一些符合要求的拆分：(2 + 10)，(2 + 4 + 6) 和 (4 + 8) 。
// (2 + 4 + 6) 为最多数目的整数，数目为 3 ，所以我们返回 [2,4,6] 。
// [2,6,4] ，[6,2,4] 等等也都是可行的解。

// 输入：finalSum = 7
// 输出：[]
// 解释：没有办法将 finalSum 进行拆分。
// 所以返回空数组。

// 输入：finalSum = 28
// 输出：[6,8,2,12]
// 解释：以下是一些符合要求的拆分：(2 + 26)，(6 + 8 + 2 + 12) 和 (4 + 24) 。
// (6 + 8 + 2 + 12) 有最多数目的整数，数目为 4 ，所以我们返回 [6,8,2,12] 。
// [10,2,4,12] ，[6,2,4,16] 等等也都是可行的解。


// 方法一：贪心
// 首先，如果 finalSum 为奇数，则一定无法拆分若干个偶数之和，我们返回空数组即可。
// 其次，我们期望拆分成尽可能多的偶数，那么我们应该尽可能拆分成最小的若干个偶数。这也是我们的贪心策略。
// 具体的，我们从【最小的偶数 2】开始依次尝试拆分，直到剩余的数值【小于等于】当前被拆分的【最大偶数】为止。此时，我们已经拆分成尽可能多的偶数。不可能拆分出更多的不互相同的偶数了。
// 如果此时拆分后剩余的 finalSum 大于零，则将这个数值加到最大的偶整数上，从而保证所有的数互不相同。
/**
 * @param {number} finalSum
 * @return {number[]}
 */
var maximumEvenSplit = function (finalSum) {
  if (finalSum % 2 !== 0) return [];

  const res = [];
  for (let i = 2; i <= finalSum; i += 2) {
    res.push(i);
    finalSum -= i;
  }
  res[res.length - 1] += finalSum;
  return res;
};
// 时间复杂度：O(√n)，即为拆分后的整数个数，其中 n 为数字 finalSum。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
