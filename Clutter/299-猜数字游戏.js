// 你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：
// 写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：

//  - 猜测数字中有多少位属于数字和确切位置都猜对了（称为 "Bulls"，公牛），
//  - 有多少位属于数字猜对了但是位置不对（称为 "Cows"，奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。

// 给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。
// 提示的格式为 "xAyB" ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。
// 请注意秘密数字和朋友猜测的数字都可能含有重复数字。

// 输入：secret = "1807", guess = "7810"
// 输出："1A3B"
// 解释：数字和位置都对（公牛）用 '|' 连接，数字猜对位置不对（奶牛）的采用斜体加粗标识。
// "1807"
//   |
// "7810"

// 输入：secret = "1123", guess = "0111"
// 输出："1A1B"
// 解释：数字和位置都对（公牛）用 '|' 连接，数字猜对位置不对（奶牛）的采用斜体加粗标识。
// "1123"        "1123"
//   |      or     |
// "0111"        "0111"
// 注意，两个不匹配的 1 中，只有一个会算作奶牛（数字猜对位置不对）。通过重新排列非公牛数字，其中仅有一个 1 可以成为公牛数字。

// 阅读理解题，
// secret[i] == guess[i]：称为公牛，表示两个字符串在位置 i 匹配；
// digit ∈ secret && digit ∈ guess：即数字 digit 在两个字符串中只是位置没有猜对，称为奶牛；

// 对于公牛个数（数字和确切位置都猜对了），遍历一次字符串，比较每一位数是否相同即可。
// 对于母牛个数（数字猜对了但是位置不对），用两个哈希表分别统计 secret[i] !== guess[i] 时，secret[i] 出现频次和 guess[i] 出现频次，记作 cntS 和 cntG，答案为 min(cntS[i], cntG[i])。
// 例如，secret = '12223', guess = '13332'
// 对于 secret[i] !== guess[i] 的情况，'2' 有1个猜对但是位置不对，'3' 猜了3个但是 secret 只有1个 '3'，因此，'3' 也猜对了1个但是位置不对。所以一共有 2 位属于数字猜对了但是位置不对。

// 具体的，由于是猜数字，所以可以用长度为 10 的数组来模拟哈希表。
// 遍历一次秘密数字 secret 和朋友猜测的数字 guess ，如果当前的数字相同 secret[i] !== guess[i]，则公牛数量加一，否则分别将 secret[i] 和 guess[i] 记录到 cntS 和 cntG 中。
// 最后遍历一次 cntS 中的每个数字，取 cntS 和 cntG 中当前数字的计数的最小值用于累计母牛数。

/**
 * @param {string} secret
 * @param {string} guess
 * @return {string}
 */
var getHint = function (secret, guess) {
    const cntS = new Array(10).fill(0); // 统计secret每个数字出现的次数
    const cntG = new Array(10).fill(0); // 统计guess每个数字出现的次数

    let bulls = 0; // 统计公牛个数
    for (let i = 0; i < secret.length; i++) {
        if (secret[i] === guess[i]) {
            bulls++; // 同一个位置数字相同，找到一个公牛
        } else {
            // 否则统计数字个数
            cntS[secret.charAt(i) - "0"]++;
            cntG[guess.charAt(i) - "0"]++;
        }
    }

    let cows = 0; // 统计奶牛个数

    // 每个数字，两个字符串中出现的最小值即为奶牛数
    for (let i = 0; i < 10; i++) {
        cows += Math.min(cntS[i], cntG[i]);
    }

    return `${bulls}A${cows}B`;
};
// 时间复杂度：O(n)，n 为字符串 secret 和 guess 的长度。
// 空间复杂度：O(C)，需要常数个空间统计字符频次，本题统计的是数字字符，因此 C = 10。
