// 给你一个包含若干星号 * 的字符串 s 。

// 在一步操作中，你可以：
//  - 选中 s 中的一个星号。
//  - 移除星号 左侧 最近的那个 非星号 字符，并移除该星号自身。
//  - 返回移除 所有 星号之后的字符串。

// 注意：
//  - 生成的输入保证总是可以执行题面中描述的操作。
//  - 可以证明结果字符串是唯一的。

// 输入：s = "leet**cod*e"
// 输出："lecoe"
// 解释：从左到右执行移除操作：
// - 距离第 1 个星号最近的字符是 "leet**cod*e" 中的 't' ，s 变为 "lee*cod*e" 。
// - 距离第 2 个星号最近的字符是 "lee*cod*e" 中的 'e' ，s 变为 "lecod*e" 。
// - 距离第 3 个星号最近的字符是 "lecod*e" 中的 'd' ，s 变为 "lecoe" 。
// 不存在其他星号，返回 "lecoe" 。

// 输入：s = "erase*****"
// 输出：""
// 解释：整个字符串都会被移除，所以返回空字符串。

// 方法一：栈
// 用栈维护，遇到星号 * 则弹出栈顶，否则把字符入栈。最后从栈底到栈顶就是答案。
/**
 * @param {string} s
 * @return {string}
 */
var removeStars = function (s) {
    const stack = []; // 栈
    for (const ch of s) {
        if (ch === "*") stack.pop();
        else stack.push(ch);
    }
    return stack.join("");
};
// 时间复杂度：O(n)，n 为字符串 s 的长度，需要进行对其进行一次遍历。
// 空间复杂度：O(n)，n 为字符串 s 的长度，最差情况 s 中无星号 * ，所有元素均需要入栈。
