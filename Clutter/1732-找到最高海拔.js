// 有一个自行车手打算进行一场公路骑行，这条路线总共由 n + 1 个不同海拔的点组成。自行车手从海拔为 0 的点 0 开始骑行。
// 给你一个长度为 n 的整数数组 gain ，其中 gain[i] 是点 i 和点 i + 1 的 净海拔高度差（0 <= i < n）。请你返回 最高点的海拔 。

// 输入：gain = [-5,1,5,0,-7]
// 输出：1
// 解释：海拔高度依次为 [0,-5,-4,1,1,-6] 。最高海拔为 1 。


// 输入：gain = [-4,-3,-2,-1,4,3,2]
// 输出：0
// 解释：海拔高度依次为 [0,-4,-7,-9,-10,-6,-3,-1] 。最高海拔为 0 。

/**
 * @param {number[]} gain
 * @return {number}
 */
// 模拟（前缀和）
// 根据题意，点 0 的海拔高度为 0 ，点 i（i>0）的海拔高度为： (i-1) ∑ (k=0) gain[i]
// 因此，我们只需要对数组 gain 进行一次遍历，求出前缀和的最大值，即为最高点的海拔。
// tips：实际上题目中的 gain 数组是一个差分数组，对差分数组求前缀和即可得到原海拔数组。然后求出原海拔数组的最大值即可。
var largestAltitude = function (gain) {
    let maxPrefix = 0; // 最大前缀和
    let curAltitude = 0; // 当前海拔高度
    for (let x of gain) {
        curAltitude += x;
        maxPrefix = Math.max(maxPrefix, curAltitude); // 维护最大前缀和
    }
    return maxPrefix;
};
// 时间复杂度：O(n)，n 为数组 gain 的长度
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
