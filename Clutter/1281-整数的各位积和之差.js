// 给你一个整数 n，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。

// 输入：n = 234
// 输出：15
// 解释：
// 各位数之积 = 2 * 3 * 4 = 24
// 各位数之和 = 2 + 3 + 4 = 9
// 结果 = 24 - 9 = 15

// 输入：n = 4421
// 输出：21
// 解释：
// 各位数之积 = 4 * 4 * 2 * 1 = 32
// 各位数之和 = 4 + 4 + 2 + 1 = 11
// 结果 = 32 - 11 = 21

// 方法一：模拟
// 我们只需要依次取出数字 n 中的各位数字，并计算各个数字的乘积 multiply 以及数字的和 add ，最后返回 multiply - add 即可。
// 具体的：
//  - 通过「模10」的操作获取当前 n 的最低位。
//  - 通过 「除以10向下取整」 的操作将数字 n 进行右移一位（移除最低位）。
/**
 * @param {number} n
 * @return {number}
 */
var subtractProductAndSum = function (n) {
  let multiply = 1; // 计算各位之积，初始为1
  let add = 0; // 计算各位之和，初始为0
  while (n !== 0) {
    let digit = n % 10; // 获取当前位
    multiply *= digit; // 累乘各位之积
    add += digit; // 累加各位之和
    n = Math.floor(n / 10); // 移除当前 n 的最低位，数字减少为原来的十分之一，相当于右移了一位
    // n = (n - digit) / 10; // 另一种写法
  }
  return multiply - add;
};
// 时间复杂度：O(logn)，即为数字 n 的位数。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
