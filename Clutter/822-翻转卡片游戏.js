// 在桌子上有 N 张卡片，每张卡片的正面和背面都写着一个正数（正面与背面上的数有可能不一样）。
// 我们可以先翻转任意张卡片，然后选择其中一张卡片。
// 如果选中的那张卡片背面的数字 X 与任意一张卡片的正面的数字都不同，那么这个数字是我们想要的数字。
// 哪个数是这些想要的数字中最小的数（找到这些数中的最小值）呢？如果没有一个数字符合要求的，输出 0。
// 其中, fronts[i] 和 backs[i] 分别代表第 i 张卡片的正面和背面的数字。
// 如果我们通过翻转卡片来交换正面与背面上的数，那么当初在正面的数就变成背面的数，背面的数就变成正面的数。

// 输入：fronts = [1,2,4,4,7], backs = [1,3,4,1,3]
// 输出：2
// 解释：假设我们翻转第二张卡片，那么在正面的数变成了 [1,3,4,4,7] ， 背面的数变成了 [1,2,4,1,3]。
// 接着我们选择第二张卡片，因为现在该卡片的背面的数是 2，2 与任意卡片上正面的数都不同，所以 2 就是我们想要的数字。

// 提示：
// 1 <= fronts.length == backs.length <= 1000
// 1 <= fronts[i] <= 2000
// 1 <= backs[i] <= 2000

// 方法一：哈希集
// 如果一张卡片正反面都是相同的数字，那么这张卡片无论怎么翻转，这个数字一定不能是最后所选的数字 X。
// 具体的，遍历所有卡片，将卡片上两面数字相同的加入哈希集 same 中。除了集合中的数字，都可以被选做为 X，因为就算有正面卡片值和其相同，我们也只需要将其翻转一下即可。
// 因此，我们只需再遍历一次卡片，找到不存在哈希集中的最小数字即可。
/**
 * @param {number[]} fronts
 * @param {number[]} backs
 * @return {number}
 */
var flipgame = function (fronts, backs) {
  // 构建正反面数字相同的哈希集。
  const len = fronts.length;
  const same = new Set();
  for (let i = 0; i < len; i++) {
    if (fronts[i] === backs[i]) same.add(fronts[i]);
  }

  let res = 2001; // 卡片数字最大为2000，用于存储满足条件的最小数字X，将其模2001返回，即满足找不到时返回0.

  // 寻找最小的数字 X。
  for (let i = 0; i < len; i++) {
    if (!same.has(fronts[i])) res = Math.min(res, fronts[i]);
    if (!same.has(backs[i])) res = Math.min(res, backs[i]);
  }
  return res % 2001;
};
// 时间复杂度：O(n)，n 为卡片个数。需要遍历两次卡片数组，每次遍历所需的时间都是常数的，因此总的时间复杂度为O(n)。
// 空间复杂度：O(n)，n 为卡片个数。用于构建正反面数字相同的哈希集 same。
