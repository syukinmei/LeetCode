// 给你一个仅由字符 '0' 和 '1' 组成的字符串 s 。一步操作中，你可以将任一 '0' 变成 '1' ，或者将 '1' 变成 '0' 。
// 交替字符串 定义为：如果字符串中不存在相邻两个字符相等的情况，那么该字符串就是交替字符串。例如，字符串 "010" 是交替字符串，而字符串 "0100" 不是。
// 返回使 s 变成 交替字符串 所需的 最少 操作数。


// 输入：s = "0100"
// 输出：1
// 解释：如果将最后一个字符变为 '1' ，s 就变成 "0101" ，即符合交替字符串定义。

// 输入：s = "10"
// 输出：0
// 解释：s 已经是交替字符串。

// 输入：s = "1111"
// 输出：2
// 解释：需要 2 步操作得到 "0101" 或 "1010" 。


/**
 * @param {string} s
 * @return {number}
 */
// 方法一：遍历
// 根据题意，经过多次操作，s 只可能变成两种不同的交替二进制字符串，以 1 开始交替和以 0 开始交替。
// 注意到，变成这两种不同情况的交替二进制字符串所需要的最少操作数加起来等于 s 的长度。所以，我们只需要计算出变为其中一种字符串的最少炒作数，就可以推断出另一种的最少操作数，然后取最小值即可。
var minOperations = function (s) {
    const n = s.length;
    let cnt = 0; // 操作次数
    let temp = 0;
    for (let i = 0; i < n; i++) {
        if (s[i] != temp) cnt++;
        temp ^= 1; // 异或实现01交替
    }
    return Math.min(cnt, n - cnt);
};
// 时间复杂度：O(n)，n 为输入 s 的长度，只需要遍历一次 s 字符串即可。
// 空间复杂度：O(1)，只需要常数的空间存放若干变量。
