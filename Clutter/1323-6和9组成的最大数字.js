// 给你一个仅由数字 6 和 9 组成的正整数 num。
// 你最多只能翻转一位数字，将 6 变成 9，或者把 9 变成 6 。
// 请返回你可以得到的最大数字。

// 示例 1：
// 输入：num = 9669
// 输出：9969
// 解释：
// 改变第一位数字可以得到 6669 。
// 改变第二位数字可以得到 9969 。
// 改变第三位数字可以得到 9699 。
// 改变第四位数字可以得到 9666 。
// 其中最大的数字是 9969 。

// 示例 2：
// 输入：num = 9996
// 输出：9999
// 解释：将最后一位从 6 变到 9，其结果 9999 是最大的数。

// 示例 3：
// 输入：num = 9999
// 输出：9999
// 解释：无需改变就已经是最大的数字了。

// 方法一：贪心
// 题目要求将一个由数字 6 和 9 构成的十进制数 num 进行至多一次 6 和 9 之间的翻转得到的最大数字。
// 由十进制数的性质易知：贪心的选择数位最高的一个 6 变成 9，得到的答案就是最大的。如果不存在这样的 6，则说明这个数字全由数字 9 构成。根据题意，此时不对 num 做任何更改即为最优解。
// 具体的，将数字 num 转为字符串数组，然后从左到右遍历字符，按上述算法处理。

/**
 * @param {number} num
 * @return {number}
 */
var maximum69Number = function (num) {
    let charArr = [...num.toString()];

    for (let i = 0; i < charArr.length; i++) {
        if (charArr[i] === "6") {
            charArr[i] = "9";
            break;
        }
    }

    return Number(charArr.join(""));
};
// 时间复杂度：O(lognum)。
// 空间复杂度：O(lognum)。
