// 给你一个 下标从 0 开始 的整数数组 nums ，其中 nums[i] 表示第 i 名学生的分数。另给你一个整数 k 。
// 从数组中选出任意 k 名学生的分数，使这 k 个分数间 最高分 和 最低分 的 差值 达到 最小化 。
// 返回可能的 最小差值 。

// 输入：nums = [90], k = 1
// 输出：0
// 解释：选出 1 名学生的分数，仅有 1 种方法：
// - [90] 最高分和最低分之间的差值是 90 - 90 = 0
// 可能的最小差值是 0

// 输入：nums = [9,4,1,7], k = 2
// 输出：2
// 解释：选出 2 名学生的分数，有 6 种方法：
// - [9,4,1,7] 最高分和最低分之间的差值是 9 - 4 = 5
// - [9,4,1,7] 最高分和最低分之间的差值是 9 - 1 = 8
// - [9,4,1,7] 最高分和最低分之间的差值是 9 - 7 = 2
// - [9,4,1,7] 最高分和最低分之间的差值是 4 - 1 = 3
// - [9,4,1,7] 最高分和最低分之间的差值是 7 - 4 = 3
// - [9,4,1,7] 最高分和最低分之间的差值是 7 - 1 = 6
// 可能的最小差值是 2

/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
// 方法一：排序 + 滑动窗口
var minimumDifference = function (nums, k) {
    if (nums.length === 1) return 0;
    nums.sort((a, b) => a - b); // 根据分数升序排序
    let res = Number.MAX_SAFE_INTEGER; // 滑动窗口初始化
    for (let i = 0; i <= nums.length - k; i++) {
        res = Math.min(res, nums[i + k - 1] - nums[i]);
    }
    return res;
};
// 时间复杂度：O(n log n)，n 为 数组 nums 的长度。排序需要的时间为 O(n log n)，后续遍历需要的时间为O(n)。
// 空间复杂度：O(log n)，排序需要使用的栈空间。